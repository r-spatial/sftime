[{"path":[]},{"path":"https://r-spatial.github.io/sftime/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://r-spatial.github.io/sftime/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://r-spatial.github.io/sftime/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://r-spatial.github.io/sftime/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://r-spatial.github.io/sftime/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement henning.teickner@uni-muenster.de. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://r-spatial.github.io/sftime/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://r-spatial.github.io/sftime/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://r-spatial.github.io/sftime/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://r-spatial.github.io/sftime/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://r-spatial.github.io/sftime/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://r-spatial.github.io/sftime/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://r-spatial.github.io/sftime/articles/sftime.html","id":"the-sftime-class","dir":"Articles","previous_headings":"","what":"The sftime class","title":"Introduction to sftime","text":"sftime object sf object additional time column contains temporal information alongside simple features column. allows handle irregular regular temporal information. spatiotemporal data regular temporal data (raster vector data cubes: data geometry observed set time instances), package stars developed powerful alternative (e.g. time series remote sensing imagery, regular measurements entire measurement network). sftime fills gap data arbitrary combinations geometry time occur, including irregularly collected sensor data (spatiotemporal) point pattern data. sftime objects can constructed directly sfc objects combining vector representing temporal information: Methods sftime objects : Methods sf objects listed work also sftime objects.","code":"# example sfc object x_sfc <-    sf::st_sfc(     sf::st_point(1:2),      sf::st_point(c(1,3)),      sf::st_point(2:3),      sf::st_point(c(2,1))   )  # create an sftime object directly from x_sfc x_sftime1 <- sftime::st_sftime(a = 1:4, x_sfc, time = Sys.time()- 0:3 * 3600 * 24)  # first create the sf object and from this the sftime object x_sf <- sf::st_sf(a = 1:4, x_sfc, time = x_sftime1$time) x_sftime2 <- sftime::st_sftime(x_sf)  x_sftime3 <- sftime::st_as_sftime(x_sf) # alernative option  identical(x_sftime1, x_sftime2) #> [1] TRUE identical(x_sftime1, x_sftime3) #> [1] TRUE  x_sftime1 #> Spatiotemporal feature collection with 4 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 1 xmax: 2 ymax: 3 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-25 08:39:17.616259 to 2023-06-28 08:39:17.616259. #>   a       x_sfc                time #> 1 1 POINT (1 2) 2023-06-28 08:39:17 #> 2 2 POINT (1 3) 2023-06-27 08:39:17 #> 3 3 POINT (2 3) 2023-06-26 08:39:17 #> 4 4 POINT (2 1) 2023-06-25 08:39:17 methods(class = \"sftime\") #>  [1] [                 [[<-              $<-               cbind             #>  [5] coerce            drop_na           filter            gather            #>  [9] initialize        nest              pivot_longer      plot              #> [13] print             rbind             separate_rows     separate          #> [17] show              slotsFromS3       spread            st_as_sftime      #> [21] st_cast           st_crop           st_difference     st_drop_geometry  #> [25] st_filter         st_intersection   st_join           st_sym_difference #> [29] st_time           st_time<-         st_union          transform         #> [33] unite             unnest            #> see '?methods' for accessing help and source code"},{"path":"https://r-spatial.github.io/sftime/articles/sftime.html","id":"functions-to-get-or-set-the-time-column-of-an-sftime-object","dir":"Articles","previous_headings":"","what":"Functions to get or set the time column of an sftime object","title":"Introduction to sftime","text":"Functions get set time column sftime object :","code":"# get the values from the time column st_time(x_sftime1) #> [1] \"2023-06-28 08:39:17 UTC\" \"2023-06-27 08:39:17 UTC\" #> [3] \"2023-06-26 08:39:17 UTC\" \"2023-06-25 08:39:17 UTC\" x_sftime1$time # alternative way #> [1] \"2023-06-28 08:39:17 UTC\" \"2023-06-27 08:39:17 UTC\" #> [3] \"2023-06-26 08:39:17 UTC\" \"2023-06-25 08:39:17 UTC\"  # set the values in the time column st_time(x_sftime1) <- Sys.time() st_time(x_sftime1) #> [1] \"2023-06-28 08:39:17 UTC\" \"2023-06-28 08:39:17 UTC\" #> [3] \"2023-06-28 08:39:17 UTC\" \"2023-06-28 08:39:17 UTC\"  # drop the time column to convert an sftime object to an sf object st_drop_time(x_sftime1) #> Simple feature collection with 4 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 1 xmax: 2 ymax: 3 #> CRS:           NA #>   a       x_sfc #> 1 1 POINT (1 2) #> 2 2 POINT (1 3) #> 3 3 POINT (2 3) #> 4 4 POINT (2 1) x_sftime1 #> Spatiotemporal feature collection with 4 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 1 xmax: 2 ymax: 3 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:17.846532 to 2023-06-28 08:39:17.846532. #>   a       x_sfc                time #> 1 1 POINT (1 2) 2023-06-28 08:39:17 #> 2 2 POINT (1 3) 2023-06-28 08:39:17 #> 3 3 POINT (2 3) 2023-06-28 08:39:17 #> 4 4 POINT (2 1) 2023-06-28 08:39:17  # add a time column to an sf object converts it to an sftime object st_time(x_sftime1, time_column_name = \"time\") <- Sys.time() class(x_sftime1) #> [1] \"sftime\"     \"sf\"         \"data.frame\"  # These can also be used with pipes x_sftime1 <-   x_sftime1 %>%   st_drop_time() %>%   st_set_time(Sys.time(), time_column_name = \"time\")"},{"path":"https://r-spatial.github.io/sftime/articles/sftime.html","id":"conversion-to-class-sftime","dir":"Articles","previous_headings":"","what":"Conversion to class sftime","title":"Introduction to sftime","text":"sftime supports coercion sftime objects following classes (grouped according packages): sf: sf stars: stars spacetime: STI, STIDF trajectories: Track, Tracks, TracksCollection sftrack: sftrack, sftraj cubble: cubble_df Conversion sf objects: Conversion stars objects: st_as_sftime.stars wrapper around st_as_sf.stars. consequence, dimensions stars object can dropped conversion. Temporal information stars objects typically stored dimension attribute. Therefore, argument settings st_as_sftime can drop dimension temporal information therefore throw error. example, setting merge = TRUE drops dimension time therefore conversion fails. Similarly, setting long = FALSE returns attribute values wide format, column time point: Conversion spacetime objects Conversion Track, Tracks, TracksCollections objects (trajectories package) Conversion cubble_df objects , nested long-form cubble_df can converted class sftime. cubble_df object simple features column (also class sf), function first converts longitude latitude simple features column using cubble::add_geometry_column().","code":"# define the geometry column g <-    st_sfc(     st_point(c(1, 2)),      st_point(c(1, 3)),      st_point(c(2, 3)),      st_point(c(2, 1)),      st_point(c(3, 1))   )  # crate sf object x4_sf <- st_sf(a = 1:5, g, time = Sys.time() + 1:5)  # convert to sftime x4_sftime <- st_as_sftime(x4_sf)  class(x4_sftime) #> [1] \"sftime\"     \"sf\"         \"data.frame\" # load sample data x5_stars <- stars::read_ncdf(system.file(\"nc/bcsd_obs_1999.nc\", package = \"stars\"), var = c(\"pr\", \"tas\")) #> Will return stars object with 32076 cells. #> No projection information found in nc file.  #>  Coordinate variable units found to be degrees,  #>  assuming WGS84 Lat/Lon.  # convert to sftime x5_sftime <- st_as_sftime(x5_stars, time_column_name = \"time\") # failed conversion to sftime x5_sftime <- st_as_sftime(x5_stars, merge = TRUE, time_column_name = \"time\") #> Error in st_as_sftime.stars(x5_stars, merge = TRUE, time_column_name = \"time\"): `time_column_name` is not a column in the converted object. x5_sftime <- st_as_sftime(x5_stars, long = FALSE, time_column_name = \"time\") #> Error in st_as_sftime.stars(x5_stars, long = FALSE, time_column_name = \"time\"): `time_column_name` is not a column in the converted object. # get sample data example(STI, package = \"spacetime\") #>  #> STI> sp = cbind(x = c(0,0,1), y = c(0,1,1)) #>  #> STI> row.names(sp) = paste(\"point\", 1:nrow(sp), sep=\"\") #>  #> STI> library(sp) #>  #> STI> sp = SpatialPoints(sp) #>  #> STI> time = as.POSIXct(\"2010-08-05\")+3600*(10:13) #>  #> STI> m = c(10,20,30) # means for each of the 3 point locations #>  #> STI> mydata = rnorm(length(sp)*length(time),mean=rep(m, 4)) #>  #> STI> IDs = paste(\"ID\",1:length(mydata)) #>  #> STI> mydata = data.frame(values = signif(mydata,3), ID=IDs) #>  #> STI> stidf = as(STFDF(sp, time, mydata), \"STIDF\") #>  #> STI> stidf[1:2,] #> An object of class \"STIDF\" #> Slot \"data\": #>   values   ID #> 1   9.64 ID 1 #> 2  21.40 ID 2 #>  #> Slot \"sp\": #> SpatialPoints: #>        x y #> point1 0 0 #> point2 0 1 #> Coordinate Reference System (CRS) arguments: NA  #>  #> Slot \"time\": #>                     timeIndex #> 2010-08-05 10:00:00         1 #> 2010-08-05 10:00:00         1 #>  #> Slot \"endTime\": #> [1] \"2010-08-05 11:00:00 UTC\" \"2010-08-05 11:00:00 UTC\" #>  #>  #> STI> all.equal(stidf, stidf[stidf,]) #> [1] TRUE class(stidf) #> [1] \"STIDF\" #> attr(,\"package\") #> [1] \"spacetime\"  # conversion to sftime x1_sftime <- st_as_sftime(stidf) #> Warning in .check_tzones(e1, e2): 'tzone' attributes are inconsistent # get a sample TracksCollection x2_TracksCollection <- trajectories::rTracksCollection(p = 2, m = 3, n = 40)  # convert to sftime x2_TracksCollection_sftime <- st_as_sftime(x2_TracksCollection) #> Warning in .check_tzones(e1, e2): 'tzone' attributes are inconsistent x2_Tracks_sftime <- st_as_sftime(x2_TracksCollection@tracksCollection[[1]]) #> Warning in .check_tzones(e1, e2): 'tzone' attributes are inconsistent x2_Track_sftime <- st_as_sftime(x2_TracksCollection@tracksCollection[[1]]@tracks[[1]]) #> Warning in .check_tzones(e1, e2): 'tzone' attributes are inconsistent # get a sample cubble_df object climate_aus <- cubble::climate_aus  # convert to sftime climate_aus_sftime <-    st_as_sftime(climate_aus[1:4, ]) #> CRS missing: using OGC:CRS84 (WGS84) as default  climate_aus_sftime <-    st_as_sftime(cubble::face_temporal(climate_aus)[1:4, ]) #> CRS missing: using OGC:CRS84 (WGS84) as default"},{"path":"https://r-spatial.github.io/sftime/articles/sftime.html","id":"subsetting","dir":"Articles","previous_headings":"","what":"Subsetting","title":"Introduction to sftime","text":"Different subsetting methods exist sftime objects. Since sftime objects built top sf objects, subsetting methods sf objects also work sftime objects. (section sftime class), method subset time column introduced: subsetting functions work sf objects, e.g. selecting rows row indices returns specified rows. key difference active time column sftime object sticky — contrast active simple feature column sf objects. Therefore, active time column sftime object always selected explicitly. omitted, subset simplify sf objects without active time column:","code":"st_time(x_sftime1) #> [1] \"2023-06-28 08:39:17 UTC\" \"2023-06-28 08:39:17 UTC\" #> [3] \"2023-06-28 08:39:17 UTC\" \"2023-06-28 08:39:17 UTC\" # selecting rows and columns (works just as for sf objects) x_sftime1[1, ] #> Spatiotemporal feature collection with 1 feature and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 1 ymax: 2 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Representing 2023-06-28 08:39:17.858337. #>   a       x_sfc                time #> 1 1 POINT (1 2) 2023-06-28 08:39:17 x_sftime1[, 3] #> Spatiotemporal feature collection with 4 features and 0 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 1 xmax: 2 ymax: 3 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:17.858337 to 2023-06-28 08:39:17.858337. #>                  time       x_sfc #> 1 2023-06-28 08:39:17 POINT (1 2) #> 2 2023-06-28 08:39:17 POINT (1 3) #> 3 2023-06-28 08:39:17 POINT (2 3) #> 4 2023-06-28 08:39:17 POINT (2 1)  # beware: the time column is not sticky. If omitted, the subset becomes an sf object class(x_sftime1[, 1]) #> [1] \"sf\"         \"data.frame\" class(x_sftime1[\"a\"]) # the same #> [1] \"sf\"         \"data.frame\" x_sftime1[, 1] #> Simple feature collection with 4 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 1 xmax: 2 ymax: 3 #> CRS:           NA #>   a       x_sfc #> 1 1 POINT (1 2) #> 2 2 POINT (1 3) #> 3 3 POINT (2 3) #> 4 4 POINT (2 1)  # to retain the time column and an sftime object, explicitly select the time column during subsetting: class(x_sftime1[, c(1, 3)]) #> [1] \"sftime\"     \"sf\"         \"data.frame\" class(x_sftime1[c(\"a\", \"time\")]) # the same #> [1] \"sftime\"     \"sf\"         \"data.frame\""},{"path":"https://r-spatial.github.io/sftime/articles/sftime.html","id":"plotting","dir":"Articles","previous_headings":"","what":"Plotting","title":"Introduction to sftime","text":"quick plotting, plot method exists sftime objects, plots longitude-latitude coordinates colors simple features according values specified variable. Different panels plotted different time intervals can specified. Simple feature geometries might overlaid several times multiple observations fall time interval. similar stplot() package spacetime mode = \"xy\":  plotting method internally uses plot method sf objects. makes possible customize plot appearance using arguments plot.sf(), example:  create customized plots plots different variables plot axes longitude latitude, recommend using ggplot2. example, plot method output can mimicked :  strategy can also used create plots, example plotting id entities time (similar stplot() mode = \"xt\"):  plotting time series values variables different panels entity (location) defined via categorical variable (similar stplot() mode = \"tp\"):  plotting time series values variables entities defined via categorical variable different panels variable (similar stplot() mode = \"ts\"):","code":"coords <- matrix(runif(100), ncol = 2) g <- sf::st_sfc(lapply(1:50, function(i) st_point(coords[i, ]) ))  x_sftime4 <-    st_sftime(     a = 1:200,     b = rnorm(200),     id_object = as.factor(rep(1:4,each=50)),     geometry = g,      time = as.POSIXct(\"2020-09-01 00:00:00\") + 0:49 * 3600 * 6 )  #> Warning in data.frame(..., check.names = FALSE): row names were found from a #> short variable and have been discarded  plot(x_sftime4, key.pos = 4) #> NULL plot(x_sftime4, number = 10, max.plot = 10, key.pos = 4) #> NULL library(ggplot2)  ggplot() +    geom_sf(data = x_sftime4, aes(color = b)) +    facet_wrap(~ cut_number(time, n = 6)) +   theme(     panel.spacing.x = unit(4, \"mm\"),      panel.spacing.y = unit(4, \"mm\")   ) ggplot(x_sftime4) +    geom_point(aes(y = id_object, x = time, color = b)) x_sftime4 %>%   tidyr::pivot_longer(cols = c(\"a\", \"b\"), names_to = \"variable\", values_to = \"value\") %>%   ggplot() +    geom_path(aes(y = value, x = time, color = variable)) +   facet_wrap(~ id_object) x_sftime4 %>%   tidyr::pivot_longer(cols = c(\"a\", \"b\"), names_to = \"variable\", values_to = \"value\") %>%   ggplot() +    geom_path(aes(y = value, x = time, color = id_object)) +   facet_wrap(~ variable, scales = \"free_y\")"},{"path":"https://r-spatial.github.io/sftime/articles/sftime.html","id":"user-defined-time-columns","dir":"Articles","previous_headings":"","what":"User-defined time columns","title":"Introduction to sftime","text":"time column special column underlying sf object defines time information (timestamps temporal ordering) alongside simple features column sf object. Common time representations R (e.g. POSIXct, POSIXlt, Date, yearmon, yearqtr) allowed, well optional user-defined types. Let us look simple example define time column based POSIXct ordering altered upon construction (representations). different order required, order function sort method can applied time column: applications might useful complex temporal information intervals different length. following example also meant template user-defined classes used build time column sftime class. first, need helper functions: Now, can define different intervals used represent temporal information: advantage able define different sorting approaches: Based sorting procedure (begin, centre end interval), smallest element (last line) order time column changes.","code":"(tc <- as.POSIXct(\"2020-09-01 08:00:00\")-0:3*3600*24) #> [1] \"2020-09-01 08:00:00 UTC\" \"2020-08-31 08:00:00 UTC\" #> [3] \"2020-08-30 08:00:00 UTC\" \"2020-08-29 08:00:00 UTC\" tc #> [1] \"2020-09-01 08:00:00 UTC\" \"2020-08-31 08:00:00 UTC\" #> [3] \"2020-08-30 08:00:00 UTC\" \"2020-08-29 08:00:00 UTC\" order(tc) #> [1] 4 3 2 1 sort(tc) #> [1] \"2020-08-29 08:00:00 UTC\" \"2020-08-30 08:00:00 UTC\" #> [3] \"2020-08-31 08:00:00 UTC\" \"2020-09-01 08:00:00 UTC\" # utility functions as.character.interval <- function(x) {   paste0(\"[\", x[1], \", \", x[2], \"]\") }  print.interval <- function(x, ...) {   cat(\"Interval:\", as.character(x), \"\\n\") }  #'[.intervals' <- function(x, i) { #  sx <- unclass(x)[i] #  class(sx) <- \"intervals\" #  sx #} # time interval definition i1 <- c(5.3,12) class(i1) <- \"interval\" i2 <- c(3.1,6) class(i2) <- \"interval\" i3 <- c(1.4,6.9) class(i3) <- \"interval\" i4 <- c(1,21) class(i4) <- \"interval\"  intrvls <- structure(list(i1, i2, i3, i4), class = \"Intervals\") # provide dedicated generic to xtfrm for class intervals xtfrm.Intervals <- function(x) sapply(x, mean) # - sort by centre (tc <- intrvls) #> [[1]] #> Interval: [5.3, 12]  #>  #> [[2]] #> Interval: [3.1, 6]  #>  #> [[3]] #> Interval: [1.4, 6.9]  #>  #> [[4]] #> Interval: [1, 21]  #>  #> attr(,\"class\") #> [1] \"Intervals\" order(tc) #> [1] 3 2 1 4 sort(tc)[1] #> [[1]] #> Interval: [1.4, 6.9] # - sort by end xtfrm.Intervals <- function(x) sapply(x, max) (tc <- intrvls) #> [[1]] #> Interval: [5.3, 12]  #>  #> [[2]] #> Interval: [3.1, 6]  #>  #> [[3]] #> Interval: [1.4, 6.9]  #>  #> [[4]] #> Interval: [1, 21]  #>  #> attr(,\"class\") #> [1] \"Intervals\" order(tc) #> [1] 2 3 1 4 sort(tc)[1] #> [[1]] #> Interval: [3.1, 6] # - sort by start xtfrm.Intervals <- function(x) sapply(x, min) tc <- intrvls order(tc) #> [1] 4 3 2 1 sort(tc)[1] #> [[1]] #> Interval: [1, 21]"},{"path":"https://r-spatial.github.io/sftime/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Henning Teickner. Author, maintainer, copyright holder. Edzer Pebesma. Author, copyright holder. Benedikt Graeler. Author, copyright holder.","code":""},{"path":"https://r-spatial.github.io/sftime/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Teickner H, Pebesma E, Graeler B (2023). sftime: Classes Methods Simple Feature Objects Time Column. https://r-spatial.github.io/sftime/, https://github.com/r-spatial/sftime.","code":"@Manual{,   title = {sftime: Classes and Methods for Simple Feature Objects that Have a Time Column},   author = {Henning Teickner and Edzer Pebesma and Benedikt Graeler},   year = {2023},   note = {https://r-spatial.github.io/sftime/, https://github.com/r-spatial/sftime}, }"},{"path":"https://r-spatial.github.io/sftime/index.html","id":"sftime","dir":"","previous_headings":"","what":"Classes and Methods for Simple Feature Objects that Have a Time Column","title":"Classes and Methods for Simple Feature Objects that Have a Time Column","text":"sftime provides time extension simple features R. sftime extension sf package. allows store spatial features accompanied time information, similar stars package. sftime complement stars package: Whereas stars dedicated handle regular spatiotemporal data, space time represent array dimensions data cubes, sftime provides generic data format can also handle irregular spatiotemporal data. Examples data include earthquakes, accidents, disease death cases, lightning strikes, also movement data constraints.","code":""},{"path":"https://r-spatial.github.io/sftime/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Classes and Methods for Simple Feature Objects that Have a Time Column","text":"can install CRAN version package : can install development version sftime GitHub :","code":"install.packages(\"sftime\") library(remotes) install_github(\"r-spatial/sftime\")"},{"path":"https://r-spatial.github.io/sftime/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Classes and Methods for Simple Feature Objects that Have a Time Column","text":"Contributions sorts welcome, issues pull requests preferred ways sharing . Please note sftime project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://r-spatial.github.io/sftime/index.html","id":"acknowledgment","dir":"","previous_headings":"","what":"Acknowledgment","title":"Classes and Methods for Simple Feature Objects that Have a Time Column","text":"project gratefully acknowledges financial support ","code":""},{"path":"https://r-spatial.github.io/sftime/reference/bind.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind rows (features) of sftime objects — bind","title":"Bind rows (features) of sftime objects — bind","text":"Bind rows (features) sftime objects Bind columns (variables) sftime objects","code":""},{"path":"https://r-spatial.github.io/sftime/reference/bind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind rows (features) of sftime objects — bind","text":"","code":"# S3 method for sftime rbind(..., deparse.level = 1)  # S3 method for sftime cbind(..., deparse.level = 1, sf_column_name = NULL, tc_column_name = NULL)"},{"path":"https://r-spatial.github.io/sftime/reference/bind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind rows (features) of sftime objects — bind","text":"... Objects bind; note rbind cbind  methods, objects class sftime; see  dotsMethods. deparse.level integer value; see rbind. sf_column_name Character value; specifies active geometry column;  passed st_sftime. tc_column_name Character value; specifies active time column; passed  st_sftime.","code":""},{"path":"https://r-spatial.github.io/sftime/reference/bind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bind rows (features) of sftime objects — bind","text":"rbind combines sftime objects ... row-wise returns combined sftime object. cbind combines sftime objects ... column-wise returns combined sftime object. called  multiple sftime objects warns multiple time geometry columns  present time geometry columns use specified using  arguments tc_column_name sf_column_name; see also  st_sftime.","code":""},{"path":"https://r-spatial.github.io/sftime/reference/bind.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bind rows (features) of sftime objects — bind","text":"rbind cbind non-standard method dispatch  (see cbind): rbind cbind method  sftime objects called arguments combined  class sftime. need cbind e.g. data.frame sf,  use data.frame directly use st_sftime  result, use bind_cols; see examples.","code":""},{"path":"https://r-spatial.github.io/sftime/reference/bind.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bind rows (features) of sftime objects — bind","text":"","code":"g1 <- st_sfc(st_point(1:2)) x1 <- st_sftime(a = 3, geometry = g1, time = Sys.time())  g2 <- st_sfc(st_point(c(4, 6))) x2 <- st_sftime(a = 4, geometry = g2, time = Sys.time())  rbind(x1, x2) # works because both tc1 and tc2 have the same class #> Spatiotemporal feature collection with 2 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 4 ymax: 6 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:38:56.664441 to 2023-06-28 08:38:56.670198. #>   a    geometry                time #> 1 3 POINT (1 2) 2023-06-28 08:38:56 #> 2 4 POINT (4 6) 2023-06-28 08:38:56  if (FALSE) { st_time(x2) <- 1 rbind(x1, x2) # error because both tc1 and tc2 do not have the same class }  cbind(x1, x2)  #> Spatiotemporal feature collection with 1 feature and 3 fields #> Active geometry column: geometry #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 1 ymax: 2 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Representing 2023-06-28 08:38:56.664441. #>   a a.1              time.1    geometry  geometry.1                time #> 1 3   4 2023-06-28 08:38:56 POINT (1 2) POINT (4 6) 2023-06-28 08:38:56  if (require(dplyr)) {   # returns a data frame because names of sf and time column are modified:   dplyr::bind_cols(x1, x2)       # returns an sf object because the name of the time column is modified:   dplyr::bind_cols(x1, x2 %>% sf::st_drop_geometry())       # returns an sftime object because names of sf and time column are both    # preserved:   dplyr::bind_cols(x1, x2 %>% st_drop_time() %>% sf::st_drop_geometry())  } #> Loading required package: dplyr #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union #> New names: #> • `a` -> `a...1` #> • `geometry` -> `geometry...2` #> • `time` -> `time...3` #> • `a` -> `a...4` #> • `geometry` -> `geometry...5` #> • `time` -> `time...6` #> New names: #> • `a` -> `a...1` #> • `time` -> `time...3` #> • `a` -> `a...4` #> • `time` -> `time...5` #> New names: #> • `a` -> `a...1` #> • `a` -> `a...4` #> Spatiotemporal feature collection with 1 feature and 2 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 1 ymax: 2 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Representing 2023-06-28 08:38:56.664441. #>   a...1 a...4    geometry                time #> 1     3     4 POINT (1 2) 2023-06-28 08:38:56    df <- data.frame(x = 3)    st_sftime(data.frame(x1, df))    #> Spatiotemporal feature collection with 1 feature and 2 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 1 ymax: 2 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Representing 2023-06-28 08:38:56.664441. #>   a x    geometry                time #> 1 3 3 POINT (1 2) 2023-06-28 08:38:56"},{"path":"https://r-spatial.github.io/sftime/reference/geos_binary_ops.html","id":null,"dir":"Reference","previous_headings":"","what":"Geometric operations on pairs of simple feature geometry sets (including sftime objects) — geos_binary_ops","title":"Geometric operations on pairs of simple feature geometry sets (including sftime objects) — geos_binary_ops","text":"Geometric operations pairs simple feature geometry sets (including sftime objects) Intersection Difference","code":""},{"path":"https://r-spatial.github.io/sftime/reference/geos_binary_ops.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geometric operations on pairs of simple feature geometry sets (including sftime objects) — geos_binary_ops","text":"","code":"# S3 method for sftime st_intersection(x, y, ...)  # S3 method for sftime st_difference(x, y, ...)  # S3 method for sftime st_sym_difference(x, y, ...)"},{"path":"https://r-spatial.github.io/sftime/reference/geos_binary_ops.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geometric operations on pairs of simple feature geometry sets (including sftime objects) — geos_binary_ops","text":"x object class sftime, sf, sfc sfg. y object class sftime, sf, sfc sfg. ... See geos_binary_ops.","code":""},{"path":"https://r-spatial.github.io/sftime/reference/geos_binary_ops.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geometric operations on pairs of simple feature geometry sets (including sftime objects) — geos_binary_ops","text":"intersection, difference symmetric difference two sets  geometries. returned object class first argument  (x) non-empty geometries resulting applying  operation geometry pairs x y. case x class sf sftime, matching attributes  original object(s) added. sfc geometry list-column returned  carries attribute idx, n--2 matrix every  row index corresponding entries x y,  respectively.","code":""},{"path":"https://r-spatial.github.io/sftime/reference/geos_binary_ops.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Geometric operations on pairs of simple feature geometry sets (including sftime objects) — geos_binary_ops","text":"st_intersection: called missing y,  sftime method st_intersection returns sftime  object attributes taken contributing feature lowest index;  two fields added: n.overlaps number overlapping features x. origins list-column indexes overlapping    features. st_difference: st_difference called  single argument, overlapping areas erased geometries  indexed greater numbers argument x; geometries  empty contained fully inside geometries higher priority removed  entirely.","code":""},{"path":"https://r-spatial.github.io/sftime/reference/geos_binary_ops.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Geometric operations on pairs of simple feature geometry sets (including sftime objects) — geos_binary_ops","text":"","code":"g <- st_sfc(st_point(c(1, 2)), st_point(c(1, 3)), st_point(c(2, 3)),       st_point(c(2, 1)), st_point(c(3, 1))) tc <- Sys.time() + 1:5 x1 <- st_sftime(a = 1:5, g, time = tc) x2 <- st_buffer(x1, dist = 1)  ## intersection  # only x provided (no y) plot(st_intersection(x2)) #> [INFO] Fewer time stamps in the data than asked for; argument 'number' set to: 5  #> NULL  # with arguments x and y provided plot(st_intersection(x2, x1)) #> Warning: attribute variables are assumed to be spatially constant throughout all geometries #> [INFO] Fewer time stamps in the data than asked for; argument 'number' set to: 5  #> NULL  ## difference  # only x provided (no y) plot(st_difference(x2)) #> [INFO] Fewer time stamps in the data than asked for; argument 'number' set to: 5  #> NULL  # with arguments x and y provided plot(st_difference(x2, x1)) #> Warning: attribute variables are assumed to be spatially constant throughout all geometries #> [INFO] Fewer time stamps in the data than asked for; argument 'number' set to: 5  #> NULL  ## symmetric difference plot(st_sym_difference(x1, x2)) #> Warning: attribute variables are assumed to be spatially constant throughout all geometries #> [INFO] Fewer time stamps in the data than asked for; argument 'number' set to: 5  #> NULL"},{"path":"https://r-spatial.github.io/sftime/reference/geos_combine.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine or union feature geometries (including sftime objects) — geos_combine","title":"Combine or union feature geometries (including sftime objects) — geos_combine","text":"Combine union feature geometries (including sftime objects)","code":""},{"path":"https://r-spatial.github.io/sftime/reference/geos_combine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine or union feature geometries (including sftime objects) — geos_combine","text":"","code":"# S3 method for sftime st_union(x, y, ..., by_feature = FALSE, is_coverage = FALSE)"},{"path":"https://r-spatial.github.io/sftime/reference/geos_combine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine or union feature geometries (including sftime objects) — geos_combine","text":"x object class sftime, sf, sfc  sfg. y object class sftime, sf, sfc  sfg (optional). ... See geos_combine. by_feature See geos_combine. is_coverage See geos_combine.","code":""},{"path":"https://r-spatial.github.io/sftime/reference/geos_combine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine or union feature geometries (including sftime objects) — geos_combine","text":"y missing, st_union(x) returns single geometry  resolved boundaries, else geometries unioned pairs  x[] y[j].","code":""},{"path":"https://r-spatial.github.io/sftime/reference/geos_combine.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine or union feature geometries (including sftime objects) — geos_combine","text":"See geos_combine.","code":""},{"path":"https://r-spatial.github.io/sftime/reference/geos_combine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine or union feature geometries (including sftime objects) — geos_combine","text":"","code":"# union simple features in an sftime object g <- st_sfc(st_point(c(1, 2)), st_point(c(1, 3)), st_point(c(2, 3)),       st_point(c(2, 1)), st_point(c(3, 1))) tc <- Sys.time() + 1:5 x <- st_sftime(a = 1:5, g, time = tc)  # only x provided (no y) plot(st_union(st_buffer(x, dist = 1)))   # with arguments x and y provided plot(st_union(st_buffer(x, dist = 1), st_buffer(x, dist = 0.5)), \"a\") #> Warning: attribute variables are assumed to be spatially constant throughout all geometries #> [INFO] Fewer time stamps in the data than asked for; argument 'number' set to: 5  #> NULL"},{"path":"https://r-spatial.github.io/sftime/reference/is_sortable.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks whether a vector or list is sortable — is_sortable","title":"Checks whether a vector or list is sortable — is_sortable","text":"Checks whether vector list sortable. condition  vector usable time column sftime object.","code":""},{"path":"https://r-spatial.github.io/sftime/reference/is_sortable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks whether a vector or list is sortable — is_sortable","text":"","code":"is_sortable(x)"},{"path":"https://r-spatial.github.io/sftime/reference/is_sortable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks whether a vector or list is sortable — is_sortable","text":"x object check.","code":""},{"path":"https://r-spatial.github.io/sftime/reference/is_sortable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks whether a vector or list is sortable — is_sortable","text":"TRUE x passes check, else FALSE.","code":""},{"path":"https://r-spatial.github.io/sftime/reference/is_sortable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Checks whether a vector or list is sortable — is_sortable","text":"Checks whether provided object can handled  order. couple basic types whitelisted. However, custom  types can defined provide dedicated generic xtfrm.  Note list can sorted atomic values. See  examples template.","code":""},{"path":"https://r-spatial.github.io/sftime/reference/is_sortable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks whether a vector or list is sortable — is_sortable","text":"","code":"x <- Sys.time() + 5:1 * 3600 * 24 sort(x) #> [1] \"2023-06-29 08:38:59 UTC\" \"2023-06-30 08:38:59 UTC\" #> [3] \"2023-07-01 08:38:59 UTC\" \"2023-07-02 08:38:59 UTC\" #> [5] \"2023-07-03 08:38:59 UTC\" is_sortable(x) #> [1] TRUE"},{"path":"https://r-spatial.github.io/sftime/reference/plot.sftime.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots an  sftime object — plot.sftime","title":"Plots an  sftime object — plot.sftime","text":"plot.sftime","code":""},{"path":"https://r-spatial.github.io/sftime/reference/plot.sftime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots an  sftime object — plot.sftime","text":"","code":"# S3 method for sftime plot(x, y, ..., number = 6, tcuts)"},{"path":"https://r-spatial.github.io/sftime/reference/plot.sftime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots an  sftime object — plot.sftime","text":"x sftime object plotted. y character value; variable name plotted; missing,  first variable plotted. ... Additional arguments; Passed plot.sf. number numeric value; number panels plotted,  larger number timestamps; ignored tcuts provided. tcuts predefined temporal ranges assigned map; missing,  determined equal spans according number.","code":""},{"path":"https://r-spatial.github.io/sftime/reference/plot.sftime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots an  sftime object — plot.sftime","text":"Returns NULL creates side effect plot x.","code":""},{"path":"https://r-spatial.github.io/sftime/reference/plot.sftime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots an  sftime object — plot.sftime","text":"","code":"set.seed(123) coords <- matrix(runif(100), ncol = 2) g <- st_sfc(lapply(1:50, function(i) st_point(coords[i, ]) )) sft <- st_sftime(a = 1:50, g, time = as.POSIXct(\"2020-09-01 00:00:00\") + 0:49 * 3600 * 6)  plot(sft)  #> NULL"},{"path":"https://r-spatial.github.io/sftime/reference/print.sftime.html","id":null,"dir":"Reference","previous_headings":"","what":"Prints an sftime object — print.sftime","title":"Prints an sftime object — print.sftime","text":"Prints sftime object","code":""},{"path":"https://r-spatial.github.io/sftime/reference/print.sftime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prints an sftime object — print.sftime","text":"","code":"# S3 method for sftime print(x, ..., n = getOption(\"sf_max_print\", default = 10))"},{"path":"https://r-spatial.github.io/sftime/reference/print.sftime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prints an sftime object — print.sftime","text":"x object class sftime. ... Currently unused arguments, compatibility. n Numeric value; maximum number printed elements.","code":""},{"path":"https://r-spatial.github.io/sftime/reference/print.sftime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prints an sftime object — print.sftime","text":"x (invisible).","code":""},{"path":"https://r-spatial.github.io/sftime/reference/print.sftime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prints an sftime object — print.sftime","text":"","code":"g <- st_sfc(st_point(c(1, 2)), st_point(c(1, 3)), st_point(c(2, 3)),       st_point(c(2, 1)), st_point(c(3, 1))) tc <- Sys.time() + 1:5 x <- st_sftime(a = 1:5, g, time = tc) print(x) #> Spatiotemporal feature collection with 5 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 1 xmax: 3 ymax: 3 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:01.370717 to 2023-06-28 08:39:05.370717. #>   a           g                time #> 1 1 POINT (1 2) 2023-06-28 08:39:01 #> 2 2 POINT (1 3) 2023-06-28 08:39:02 #> 3 3 POINT (2 3) 2023-06-28 08:39:03 #> 4 4 POINT (2 1) 2023-06-28 08:39:04 #> 5 5 POINT (3 1) 2023-06-28 08:39:05 print(x[0, ]) #> Spatiotemporal feature collection with 0 features and 1 field #> Bounding box:  xmin: NA ymin: NA xmax: NA ymax: NA #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from NA to NA. #> [1] a    g    time #> <0 rows> (or 0-length row.names)"},{"path":"https://r-spatial.github.io/sftime/reference/st_as_sftime.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a foreign object to an sftime object — st_as_sftime","title":"Convert a foreign object to an sftime object — st_as_sftime","text":"Convert foreign object sftime object","code":""},{"path":"https://r-spatial.github.io/sftime/reference/st_as_sftime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a foreign object to an sftime object — st_as_sftime","text":"","code":"st_as_sftime(x, ...)  # S3 method for ST st_as_sftime(x, ...)  # S3 method for Track st_as_sftime(x, ...)  # S3 method for Tracks st_as_sftime(x, ...)  # S3 method for TracksCollection st_as_sftime(x, ...)  # S3 method for sftime st_as_sftime(x, ...)  # S3 method for sf st_as_sftime(x, ..., time_column_name = NULL)  # S3 method for stars st_as_sftime(x, ..., long = TRUE, time_column_name = NULL)  # S3 method for data.frame st_as_sftime(   x,   ...,   agr = NA_agr_,   coords,   wkt,   dim = \"XYZ\",   remove = TRUE,   na.fail = TRUE,   sf_column_name = NULL,   time_column_name = NULL,   time_column_last = FALSE )  # S3 method for ppp st_as_sftime(x, ..., time_column_name)  # S3 method for psp st_as_sftime(x, ..., time_column_name)  # S3 method for lpp st_as_sftime(x, ..., time_column_name)  # S3 method for sftrack st_as_sftime(x, ...)  # S3 method for sftraj st_as_sftime(x, ...)  # S3 method for cubble_df st_as_sftime(x, ..., sfc = NULL, crs, silent = FALSE)"},{"path":"https://r-spatial.github.io/sftime/reference/st_as_sftime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a foreign object to an sftime object — st_as_sftime","text":"x object converted object class  sftime. ... arguments passed methods. time_column_name character value; name active time column.  case one time_column_name NULL,  first one taken. long logical value; See st_as_sf.  Typically, long set TRUE since time information typically dimension stars object. agr character vector; see details section st_sf. coords case point data: names numbers numeric columns  holding coordinates. wkt name number character column holds WKT encoded  geometries. dim Passed st_point (argument  coords given). remove logical value; coords wkt given,  remove columns x? na.fail logical value; TRUE, raise error coordinates  contain missing values. sf_column_name character value; name active list-column  simple feature geometries; case one  sf_column_name NULL, first one taken. time_column_last logical value; TRUE, active time column  always put last, otherwise column order left unmodified. sfc_last time_column_last TRUE, active time column put last. sfc object class sfc (see package sf) crs Coordinate reference system, something suitable input  st_crs. silent logical; suppress message?","code":""},{"path":"https://r-spatial.github.io/sftime/reference/st_as_sftime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a foreign object to an sftime object — st_as_sftime","text":"x converted sftime object. st_as_sftime.Tracks furthermore adds column  track_name names tracks slot input Tracks object. st_as_sftime.TracksCollection furthermore adds columns  tracks_name names tracksCollection slot  track_name names tracks slot input Tracks object.","code":""},{"path":"https://r-spatial.github.io/sftime/reference/st_as_sftime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a foreign object to an sftime object — st_as_sftime","text":"","code":"# modified from spacetime: library(sp) #> The legacy packages maptools, rgdal, and rgeos, underpinning the sp package, #> which was just loaded, will retire in October 2023. #> Please refer to R-spatial evolution reports for details, especially #> https://r-spatial.org/r/2023/05/15/evolution4.html. #> It may be desirable to make the sf package available; #> package maintainers should consider adding sf to Suggests:. #> The sp package is now running under evolution status 2 #>      (status 2 uses the sf package in place of rgdal) library(spacetime)  sp <- cbind(x = c(0,0,1), y = c(0,1,1)) row.names(sp) <- paste(\"point\", 1:nrow(sp), sep=\"\") sp <- SpatialPoints(sp) time <- as.POSIXct(\"2010-08-05\") + 3600 * (10:12) x <- STI(sp, time)  st_as_sftime(x) #> Warning: 'tzone' attributes are inconsistent #> Spatiotemporal feature collection with 3 features and 0 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 0 ymin: 0 xmax: 1 ymax: 1 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2010-08-05 10:00:00 to 2010-08-05 12:00:00. #>   st_as_sfc.x.sp.                time #> 1     POINT (0 0) 2010-08-05 10:00:00 #> 2     POINT (0 1) 2010-08-05 11:00:00 #> 3     POINT (1 1) 2010-08-05 12:00:00  # convert a Track object from package trajectories to an sftime object library(trajectories) x1_Track <- trajectories::rTrack(n = 100) x1_Track@data$speed <- sort(rnorm(length(x1_Track))) x1_sftime <- st_as_sftime(x1_Track) #> Warning: 'tzone' attributes are inconsistent  # convert a Tracks object from package trajectories to an sftime object x2_Tracks <- trajectories::rTracks(m = 6) x2_sftime <- st_as_sftime(x2_Tracks) #> Warning: 'tzone' attributes are inconsistent  # convert a TracksCollection object from package trajectories to an sftime object x3_TracksCollection <- trajectories::rTracksCollection(p = 2, m = 3, n = 50) x3_sftime <- st_as_sftime(x3_TracksCollection) #> Warning: 'tzone' attributes are inconsistent  # convert an sftime object to an sftime object st_as_sftime(x3_sftime) #> Spatiotemporal feature collection with 300 features and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -57.87874 ymin: -105.2126 xmax: 15.68272 ymax: 40.13782 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 1970-01-01 to 1970-01-01 04:49:00. #> First 10 features: #>    ones tracks_name track_name             st_as_sfc.x.sp.                time #> 1     1     Tracks1     Track1 POINT (0.8546559 -1.036985) 1970-01-01 00:00:00 #> 2     1     Tracks1     Track1  POINT (0.2559254 1.134189) 1970-01-01 00:00:00 #> 3     1     Tracks1     Track1 POINT (0.7723814 -2.861054) 1970-01-01 00:01:00 #> 4     1     Tracks1     Track1  POINT (-0.578062 1.354914) 1970-01-01 00:01:00 #> 5     1     Tracks1     Track1 POINT (0.4824357 -4.520175) 1970-01-01 00:02:00 #> 6     1     Tracks1     Track1  POINT (-2.030241 2.319898) 1970-01-01 00:02:00 #> 7     1     Tracks1     Track1    POINT (1.821826 -6.1945) 1970-01-01 00:03:00 #> 8     1     Tracks1     Track1  POINT (-1.977036 3.783254) 1970-01-01 00:03:00 #> 9     1     Tracks1     Track1  POINT (1.765991 -6.699866) 1970-01-01 00:04:00 #> 10    1     Tracks1     Track1  POINT (-2.123454 6.196938) 1970-01-01 00:04:00    # convert an sf object to an sftime object g <- st_sfc(st_point(c(1, 2)), st_point(c(1, 3)), st_point(c(2, 3)),       st_point(c(2, 1)), st_point(c(3, 1))) x4_sf <- st_sf(a = 1:5, g, time = Sys.time() + 1:5) x4_sftime <- st_as_sftime(x4_sf)   # convert a Tracks object from package trajectories to an sftime object x5_stars <- stars::read_stars(system.file(\"nc/bcsd_obs_1999.nc\", package = \"stars\")) #> pr, tas,  x5_sftime <- st_as_sftime(x5_stars, time_column_name = \"time\")  # this requires some thought to not accidentally drop time dimensions. For # example, setting `merge = TRUE` will drop the time dimension and thus throw # an error: if (FALSE) { x5_sftime <- st_as_sftime(x5_stars, merge = TRUE, time_column_name = \"time\") }  # convert a data frame to an sftime object x5_df <-     data.frame(a = 1:5, g, time = Sys.time() + 1:5, stringsAsFactors = FALSE) x5_sftime <- st_as_sftime(x5_df)  # convert a ppp object to an sftime object (modified from the sf package) if (require(spatstat.geom)) {   st_as_sftime(gorillas, time_column_name = \"date\") } #> Loading required package: spatstat.geom #> Loading required package: spatstat.data #> spatstat.geom 3.2-1 #> Spatiotemporal feature collection with 648 features and 3 fields #> Geometry type: GEOMETRY #> Dimension:     XY #> Bounding box:  xmin: 580457.9 ymin: 674172.8 xmax: 585934 ymax: 678739.2 #> CRS:           NA #> Time column with class: 'Date'. #> Ranging from 2006-01-06 to 2009-05-31. #> First 10 features: #>    group season  label                           geom       date #> NA  <NA>   <NA> window POLYGON ((584712 674237.1, ...       <NA> #> 1  major    dry  point      POINT (582518.4 676886.2) 2006-01-06 #> 2  major    dry  point        POINT (581823 677422.7) 2006-01-10 #> 3  major    dry  point        POINT (582131 676937.9) 2006-01-15 #> 4  major    dry  point        POINT (582111.9 677420) 2006-01-24 #> 5  minor    dry  point      POINT (582585.1 677509.7) 2006-01-27 #> 6  major    dry  point      POINT (582302.3 677521.6) 2006-01-28 #> 7  major    dry  point      POINT (583167.2 676730.5) 2006-02-01 #> 8  major    dry  point      POINT (583584.5 677207.1) 2006-02-03 #> 9  major    dry  point      POINT (583117.8 676850.3) 2006-02-13  # convert a psp object to an sftime object (modified from the spatstat.geom  # package) if (require(spatstat.geom)) {   # modified from spatstat.geom:   x_psp <-      psp(       runif(10), runif(10), runif(10), runif(10), window=owin(),        marks = data.frame(time = Sys.time() + 1:10)     )   st_as_sftime(x_psp, time_column_name = \"time\") } #> Spatiotemporal feature collection with 11 features and 1 field #> Geometry type: GEOMETRY #> Dimension:     XY #> Bounding box:  xmin: 0 ymin: 0 xmax: 1 ymax: 1 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:03.965327 to 2023-06-28 08:39:12.965327. #> First 10 features: #>      label                           geom                time #> NA  window POLYGON ((0 0, 1 0, 1 1, 0 ...                <NA> #> 1  segment LINESTRING (0.3203339 0.798... 2023-06-28 08:39:03 #> 2  segment LINESTRING (0.4039816 0.366... 2023-06-28 08:39:04 #> 3  segment LINESTRING (0.03262274 0.38... 2023-06-28 08:39:05 #> 4  segment LINESTRING (0.4922266 0.673... 2023-06-28 08:39:06 #> 5  segment LINESTRING (0.1416749 0.439... 2023-06-28 08:39:07 #> 6  segment LINESTRING (0.7991584 0.712... 2023-06-28 08:39:08 #> 7  segment LINESTRING (0.4091124 0.435... 2023-06-28 08:39:09 #> 8  segment LINESTRING (0.9364347 0.665... 2023-06-28 08:39:10 #> 9  segment LINESTRING (0.7329098 0.523... 2023-06-28 08:39:11  # convert an lpp object to an sftime object (modified from the  # spatstat.linnet package) if (require(spatstat.geom) && require(spatstat.linnet)) {   # modified from spatstat.linnet:      # letter 'A'    v <- spatstat.geom::ppp(x=(-2):2, y=3*c(0,1,2,1,0), c(-3,3), c(-1,7))   edg <- cbind(1:4, 2:5)   edg <- rbind(edg, c(2,4))   letterA <- spatstat.linnet::linnet(v, edges=edg)      # points on letter A   xx <-      spatstat.geom::ppp(       x=c(-1.5,0,0.5,1.5), y=c(1.5,3,4.5,1.5),        marks = data.frame(time = Sys.time() + 1:4, a = 1:4),        window = spatstat.geom::owin(          xrange = range(c(-1.5,0,0.5,1.5)),           yrange = range(c(1.5,3,4.5,1.5)))     )   x_lpp <- spatstat.linnet::lpp(xx, letterA)      # convert to sftime   st_as_sftime(x_lpp, time_column_name = \"time\") } #> Loading required package: spatstat.linnet #> Loading required package: spatstat.random #> spatstat.random 3.1-5 #> Loading required package: spatstat.explore #> Loading required package: nlme #>  #> Attaching package: ‘nlme’ #> The following object is masked from ‘package:dplyr’: #>  #>     collapse #> spatstat.explore 3.2-1 #> Loading required package: spatstat.model #> Loading required package: rpart #> spatstat.model 3.2-4 #> spatstat.linnet 3.1-1 #> Spatiotemporal feature collection with 10 features and 4 fields #> Geometry type: GEOMETRY #> Dimension:     XY #> Bounding box:  xmin: -3 ymin: -1 xmax: 3 ymax: 7 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:04.269447 to 2023-06-28 08:39:07.269447. #>      label seg  tp  a                           geom                time #> 1   window  NA  NA NA POLYGON ((-3 -1, 3 -1, 3 7,...                <NA> #> 2  segment  NA  NA NA        LINESTRING (-2 0, -1 3)                <NA> #> 3  segment  NA  NA NA         LINESTRING (-1 3, 0 6)                <NA> #> 4  segment  NA  NA NA          LINESTRING (0 6, 1 3)                <NA> #> 5  segment  NA  NA NA          LINESTRING (1 3, 2 0)                <NA> #> 6  segment  NA  NA NA         LINESTRING (-1 3, 1 3)                <NA> #> 7    point   1 0.5  1               POINT (-1.5 1.5) 2023-06-28 08:39:04 #> 8    point   5 0.5  2                    POINT (0 3) 2023-06-28 08:39:05 #> 9    point   3 0.5  3                POINT (0.5 4.5) 2023-06-28 08:39:06 #> 10   point   4 0.5  4                POINT (1.5 1.5) 2023-06-28 08:39:07  # convert an sftrack object to an sftime object (modified from sftrack) if (require(sftrack)) {    # get an sftrack object   data(\"raccoon\")      raccoon$timestamp <- as.POSIXct(raccoon$timestamp, \"EST\")      burstz <-      list(id = raccoon$animal_id, month = as.POSIXlt(raccoon$timestamp)$mon)        x_sftrack <-      as_sftrack(raccoon,                group = burstz, time = \"timestamp\",                error = NA, coords = c(\"longitude\", \"latitude\")   )      # convert to sftime   st_as_sftime(x_sftrack) } #> Loading required package: sftrack #> Spatiotemporal feature collection with 445 features and 8 fields (with 168 geometries empty) #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -80.28149 ymin: 26.06761 xmax: -80.27046 ymax: 26.07706 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2019-01-18 19:02:30 to 2019-02-01 18:02:30. #> First 10 features: #>    animal_id latitude longitude height hdop vdop fix               sft_group #> 1    TTP-058       NA        NA     NA  0.0  0.0  NO (id: TTP-058, month: 0) #> 2    TTP-058 26.06945 -80.27906      7  6.2  3.2  2D (id: TTP-058, month: 0) #> 3    TTP-058       NA        NA     NA  0.0  0.0  NO (id: TTP-058, month: 0) #> 4    TTP-058       NA        NA     NA  0.0  0.0  NO (id: TTP-058, month: 0) #> 5    TTP-058 26.06769 -80.27431    858  5.1  3.2  2D (id: TTP-058, month: 0) #> 6    TTP-058 26.06867 -80.27930    350  1.9  3.2  3D (id: TTP-058, month: 0) #> 7    TTP-058 26.06962 -80.27908     11  2.3  4.5  3D (id: TTP-058, month: 0) #> 8    TTP-058 26.06963 -80.27902      9  2.7  3.9  3D (id: TTP-058, month: 0) #> 9    TTP-058       NA        NA     NA  0.0  0.0  NO (id: TTP-058, month: 0) #> 10   TTP-058 26.06982 -80.27900     NA  2.0  3.3  3D (id: TTP-058, month: 0) #>                      geometry           timestamp #> 1                 POINT EMPTY 2019-01-18 19:02:30 #> 2  POINT (-80.27906 26.06945) 2019-01-18 20:02:30 #> 3                 POINT EMPTY 2019-01-18 21:02:30 #> 4                 POINT EMPTY 2019-01-18 22:02:30 #> 5  POINT (-80.27431 26.06769) 2019-01-18 23:02:30 #> 6   POINT (-80.2793 26.06867) 2019-01-19 00:02:30 #> 7  POINT (-80.27908 26.06962) 2019-01-19 01:02:30 #> 8  POINT (-80.27902 26.06963) 2019-01-19 02:02:04 #> 9                 POINT EMPTY 2019-01-19 03:02:30 #> 10   POINT (-80.279 26.06982) 2019-01-19 12:02:30  # convert an sftraj object to an sftime object (modified from sftrack) if (require(sftrack)) {    # get an sftrack object   data(\"raccoon\")      raccoon$timestamp <- as.POSIXct(raccoon$timestamp, \"EST\")      burstz <-      list(id = raccoon$animal_id, month = as.POSIXlt(raccoon$timestamp)$mon)      x_sftraj <-      as_sftraj(raccoon,       time = \"timestamp\",       error = NA, coords = c(\"longitude\", \"latitude\"),       group = burstz     )      # convert to sftime   st_as_sftime(x_sftraj) } #> Spatiotemporal feature collection with 445 features and 8 fields (with 168 geometries empty) #> Geometry type: GEOMETRY #> Dimension:     XY #> Bounding box:  xmin: -80.28149 ymin: 26.06761 xmax: -80.27046 ymax: 26.07706 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2019-01-18 19:02:30 to 2019-02-01 18:02:30. #> First 10 features: #>    animal_id latitude longitude height hdop vdop fix               sft_group #> 1    TTP-058       NA        NA     NA  0.0  0.0  NO (id: TTP-058, month: 0) #> 2    TTP-058 26.06945 -80.27906      7  6.2  3.2  2D (id: TTP-058, month: 0) #> 3    TTP-058       NA        NA     NA  0.0  0.0  NO (id: TTP-058, month: 0) #> 4    TTP-058       NA        NA     NA  0.0  0.0  NO (id: TTP-058, month: 0) #> 5    TTP-058 26.06769 -80.27431    858  5.1  3.2  2D (id: TTP-058, month: 0) #> 6    TTP-058 26.06867 -80.27930    350  1.9  3.2  3D (id: TTP-058, month: 0) #> 7    TTP-058 26.06962 -80.27908     11  2.3  4.5  3D (id: TTP-058, month: 0) #> 8    TTP-058 26.06963 -80.27902      9  2.7  3.9  3D (id: TTP-058, month: 0) #> 9    TTP-058       NA        NA     NA  0.0  0.0  NO (id: TTP-058, month: 0) #> 10   TTP-058 26.06982 -80.27900     NA  2.0  3.3  3D (id: TTP-058, month: 0) #>                          geometry           timestamp #> 1                     POINT EMPTY 2019-01-18 19:02:30 #> 2      POINT (-80.27906 26.06945) 2019-01-18 20:02:30 #> 3                     POINT EMPTY 2019-01-18 21:02:30 #> 4                     POINT EMPTY 2019-01-18 22:02:30 #> 5  LINESTRING (-80.27431 26.06... 2019-01-18 23:02:30 #> 6  LINESTRING (-80.2793 26.068... 2019-01-19 00:02:30 #> 7  LINESTRING (-80.27908 26.06... 2019-01-19 01:02:30 #> 8      POINT (-80.27902 26.06963) 2019-01-19 02:02:04 #> 9                     POINT EMPTY 2019-01-19 03:02:30 #> 10 LINESTRING (-80.279 26.0698... 2019-01-19 12:02:30  # convert a cubble_df object from package cubble to an sftime object if (requireNamespace(\"cubble\", quietly = TRUE, versionCheck = \"0.3.0\")) {    # get a cubble_df object   data(\"climate_aus\", package = \"cubble\")      # convert to sftime   climate_aus_sftime <-      st_as_sftime(climate_aus[1:4, ])        climate_aus_sftime <-      st_as_sftime(cubble::face_temporal(climate_aus)[1:4, ])    }"},{"path":"https://r-spatial.github.io/sftime/reference/st_cast.html","id":null,"dir":"Reference","previous_headings":"","what":"Cast geometry to another type: either simplify, or cast explicitly — st_cast","title":"Cast geometry to another type: either simplify, or cast explicitly — st_cast","text":"Cast geometry another type: either simplify, cast explicitly","code":""},{"path":"https://r-spatial.github.io/sftime/reference/st_cast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cast geometry to another type: either simplify, or cast explicitly — st_cast","text":"","code":"# S3 method for sftime st_cast(x, to, ..., warn = TRUE, do_split = TRUE)"},{"path":"https://r-spatial.github.io/sftime/reference/st_cast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cast geometry to another type: either simplify, or cast explicitly — st_cast","text":"x object class sftime. character; target type, missing, simplification tried; x type sfg (.e., single geometry) needs specified. ... ignored warn logical; TRUE, warn attributes assigned sub-geometries do_split logical; TRUE, allow splitting geometries sub-geometries","code":""},{"path":"https://r-spatial.github.io/sftime/reference/st_cast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cast geometry to another type: either simplify, or cast explicitly — st_cast","text":"x changed geometry type.","code":""},{"path":"https://r-spatial.github.io/sftime/reference/st_cast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cast geometry to another type: either simplify, or cast explicitly — st_cast","text":"","code":"# cast from POINT to LINESTRING g <- st_sfc(st_point(1:2), st_point(c(2, 4))) time <- Sys.time() x <-    st_sftime(a = 3:4, g, time = time) %>%   dplyr::group_by(time) %>%   dplyr::summarize(do_union = TRUE) %>%   st_cast(to = \"LINESTRING\")"},{"path":"https://r-spatial.github.io/sftime/reference/st_crop.sftime.html","id":null,"dir":"Reference","previous_headings":"","what":"Crop an sftime object to a specific rectangle — st_crop.sftime","title":"Crop an sftime object to a specific rectangle — st_crop.sftime","text":"Crop sftime object specific rectangle","code":""},{"path":"https://r-spatial.github.io/sftime/reference/st_crop.sftime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crop an sftime object to a specific rectangle — st_crop.sftime","text":"","code":"# S3 method for sftime st_crop(x, y, ...)"},{"path":"https://r-spatial.github.io/sftime/reference/st_crop.sftime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Crop an sftime object to a specific rectangle — st_crop.sftime","text":"x object class sftime. y numeric vector named elements xmin, ymin,  xmax ymax, object class bbox, object  st_bbox method convert  bbox object. ... Additional arguments; Ignored.","code":""},{"path":"https://r-spatial.github.io/sftime/reference/st_crop.sftime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crop an sftime object to a specific rectangle — st_crop.sftime","text":"x cropped using y.","code":""},{"path":"https://r-spatial.github.io/sftime/reference/st_crop.sftime.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Crop an sftime object to a specific rectangle — st_crop.sftime","text":"See st_crop.","code":""},{"path":"https://r-spatial.github.io/sftime/reference/st_crop.sftime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Crop an sftime object to a specific rectangle — st_crop.sftime","text":"","code":"# modified from sf: box <- c(xmin = 0, ymin = 0, xmax = 1, ymax = 1) pol <- sf::st_sfc(sf::st_buffer(sf::st_point(c(0.5, 0.5)), 0.6)) pol_sftime <- st_sftime(a = 1, geom = pol, time = Sys.time() + 1:2 * 1000) #> Warning: row names were found from a short variable and have been discarded  pol_sftime_cropped <- sf::st_crop(pol_sftime, sf::st_bbox(box)) #> Warning: attribute variables are assumed to be spatially constant throughout all geometries  class(pol_sftime_cropped) #> [1] \"sftime\"     \"sf\"         \"data.frame\" plot(pol_sftime_cropped) #> [INFO] Fewer time stamps in the data than asked for; argument 'number' set to: 2  #> NULL"},{"path":"https://r-spatial.github.io/sftime/reference/st_geometry.html","id":null,"dir":"Reference","previous_headings":"","what":"Drops the geometry column of sftime objects — st_geometry","title":"Drops the geometry column of sftime objects — st_geometry","text":"Drops geometry column sftime object. also drop  sftime class attribute time_column attribute.","code":""},{"path":"https://r-spatial.github.io/sftime/reference/st_geometry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drops the geometry column of sftime objects — st_geometry","text":"","code":"# S3 method for sftime st_drop_geometry(x, ...)"},{"path":"https://r-spatial.github.io/sftime/reference/st_geometry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drops the geometry column of sftime objects — st_geometry","text":"x sftime object. ... ignored","code":""},{"path":"https://r-spatial.github.io/sftime/reference/st_geometry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drops the geometry column of sftime objects — st_geometry","text":"x without geometry column without sftime  sf class.","code":""},{"path":"https://r-spatial.github.io/sftime/reference/st_geometry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drops the geometry column of sftime objects — st_geometry","text":"","code":"# dropping the geometry column will also drop the `sftime` class: g <- st_sfc(st_point(1:2)) time <- Sys.time() x <- st_sftime(a = 3, g, time = time) st_drop_geometry(x) #>   a                time #> 1 3 2023-06-28 08:39:09"},{"path":"https://r-spatial.github.io/sftime/reference/st_join.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatial join, spatial filter for sftime objects — st_join","title":"Spatial join, spatial filter for sftime objects — st_join","text":"Spatial join, spatial filter sftime objects","code":""},{"path":"https://r-spatial.github.io/sftime/reference/st_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spatial join, spatial filter for sftime objects — st_join","text":"","code":"# S3 method for sftime st_join(   x,   y,   join = st_intersects,   ...,   suffix = c(\".x\", \".y\"),   left = TRUE,   largest = FALSE )  # S3 method for sftime st_filter(x, y, ..., .predicate = st_intersects)"},{"path":"https://r-spatial.github.io/sftime/reference/st_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spatial join, spatial filter for sftime objects — st_join","text":"x object class sftime sf. y object class sftime sf. join geometry predicate function profile  st_intersects; see details. ... st_join: arguments passed join function st_intersection largest TRUE; st_filter arguments passed .predicate function, e.g. prepared, pattern st_relate suffix length 2 character vector; see merge left logical; TRUE return left join, otherwise inner join; see details. see also left_join largest logical; TRUE, return x features augmented fields y largest overlap features x; see https://github.com/r-spatial/sf/issues/578 .predicate geometry predicate function profile  st_intersects; see details.","code":""},{"path":"https://r-spatial.github.io/sftime/reference/st_join.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spatial join, spatial filter for sftime objects — st_join","text":"object class sftime, joined based geometry.","code":""},{"path":"https://r-spatial.github.io/sftime/reference/st_join.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spatial join, spatial filter for sftime objects — st_join","text":"Alternative values argument join : st_contains_properly st_contains st_covered_by st_covers st_crosses st_disjoint st_equals_exact st_equals st_is_within_distance st_nearest_feature st_overlaps st_touches st_within user-defined function profile left join returns records x object y fields  non-matched records filled NA values; inner join returns  records spatially match.","code":""},{"path":"https://r-spatial.github.io/sftime/reference/st_join.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spatial join, spatial filter for sftime objects — st_join","text":"","code":"g1 <- st_sfc(st_point(c(1,1)), st_point(c(2,2)), st_point(c(3,3))) x1 <- st_sftime(a = 1:3, geometry = g1, time = Sys.time())  g2 <- st_sfc(st_point(c(10,10)), st_point(c(2,2)), st_point(c(2,2)), st_point(c(3,3))) x2 <- st_sftime(a = 11:14, geometry = g2, time = Sys.time())  ## st_join  # left spatial join with st_intersects st_join(x1, x2) #> Spatiotemporal feature collection with 4 features and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 1 xmax: 3 ymax: 3 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:09.711115 to 2023-06-28 08:39:09.711115. #>     a.x a.y              time.y    geometry              time.x #> 1     1  NA                <NA> POINT (1 1) 2023-06-28 08:39:09 #> 2     2  12 2023-06-28 08:39:09 POINT (2 2) 2023-06-28 08:39:09 #> 2.1   2  13 2023-06-28 08:39:09 POINT (2 2) 2023-06-28 08:39:09 #> 3     3  14 2023-06-28 08:39:09 POINT (3 3) 2023-06-28 08:39:09  # inner spatial join with st_intersects st_join(x1, x2, left = FALSE) #> Spatiotemporal feature collection with 3 features and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 2 ymin: 2 xmax: 3 ymax: 3 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:09.711115 to 2023-06-28 08:39:09.711115. #>     a.x a.y              time.y    geometry              time.x #> 2     2  12 2023-06-28 08:39:09 POINT (2 2) 2023-06-28 08:39:09 #> 2.1   2  13 2023-06-28 08:39:09 POINT (2 2) 2023-06-28 08:39:09 #> 3     3  14 2023-06-28 08:39:09 POINT (3 3) 2023-06-28 08:39:09  ## st_filter  st_filter(x1, x2) #> Spatiotemporal feature collection with 2 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 2 ymin: 2 xmax: 3 ymax: 3 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:09.711115 to 2023-06-28 08:39:09.711115. #>   a    geometry                time #> 1 2 POINT (2 2) 2023-06-28 08:39:09 #> 2 3 POINT (3 3) 2023-06-28 08:39:09 st_filter(x2, x1) #> Spatiotemporal feature collection with 3 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 2 ymin: 2 xmax: 3 ymax: 3 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:09.715154 to 2023-06-28 08:39:09.715154. #>    a    geometry                time #> 1 12 POINT (2 2) 2023-06-28 08:39:09 #> 2 13 POINT (2 2) 2023-06-28 08:39:09 #> 3 14 POINT (3 3) 2023-06-28 08:39:09"},{"path":"https://r-spatial.github.io/sftime/reference/st_sftime.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct an sftime object from all its components — st_sftime","title":"Construct an sftime object from all its components — st_sftime","text":"Construct sftime object components","code":""},{"path":"https://r-spatial.github.io/sftime/reference/st_sftime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct an sftime object from all its components — st_sftime","text":"","code":"st_sftime(   ...,   agr = sf::NA_agr_,   row.names,   stringsAsFactors = TRUE,   crs,   precision,   sf_column_name = NULL,   time_column_name = NULL,   check_ring_dir = FALSE,   sfc_last = TRUE,   time_column_last = TRUE )  # S3 method for sftime [(x, i, j, ..., drop = FALSE, op = sf::st_intersects)  # S3 method for sftime [[(x, i) <- value  # S3 method for sftime $(x, i) <- value"},{"path":"https://r-spatial.github.io/sftime/reference/st_sftime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct an sftime object from all its components — st_sftime","text":"... Column elements binded sftime object  single list data.frame columns. least one  columns shall geometry list-column class sfc one  shall time column (specified time_column_name). agr character vector; see details . row.names row.names created sf object. stringsAsFactors logical value; see  st_read. crs Coordinate reference system, something suitable input  st_crs. precision numeric value; see  st_as_binary. sf_column_name character value; name active list-column  simple feature geometries; case one  sf_column_name NULL, first one taken. time_column_name character value; name active  time column. case time_column_name NULL, first  POSIXct column taken. POSIXct column, first Date column taken. check_ring_dir logical value; see st_read. sfc_last logical value; TRUE, sfc columns  always put last, otherwise column order left unmodified. time_column_last logical value; TRUE, active time column  always put last, otherwise column order left unmodified. sfc_last time_column_last TRUE, active time column put last. x object class sf. Record selection, see [.data.frame j Variable selection, see [.data.frame drop logical value, default FALSE; TRUE drop  geometry column return data.frame, else make geometry sticky  return sf object. op function; geometrical binary predicate function apply  simple feature object. value object insert x rename  columns x.","code":""},{"path":"https://r-spatial.github.io/sftime/reference/st_sftime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct an sftime object from all its components — st_sftime","text":"st_sftime: object class sftime. Returned objects subsetting functions: [.sf return  data.frame vector geometry column (class sfc)  dropped (drop=TRUE), sfc object geometry column  selected, otherwise return sftime object.","code":""},{"path":"https://r-spatial.github.io/sftime/reference/st_sftime.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct an sftime object from all its components — st_sftime","text":"See also [.data.frame; [.sftime ...  arguments passed op.","code":""},{"path":"https://r-spatial.github.io/sftime/reference/st_sftime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct an sftime object from all its components — st_sftime","text":"","code":"## construction with an sfc object library(sf) g <- st_sfc(st_point(1:2)) tc <- Sys.time() st_sftime(a = 3, g, time = tc) #> Spatiotemporal feature collection with 1 feature and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 1 ymax: 2 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Representing 2023-06-28 08:39:10.23072. #>   a           g                time #> 1 3 POINT (1 2) 2023-06-28 08:39:10  ## construction with an sf object if (FALSE) { st_sftime(st_sf(a = 3, g), time = tc)  # error, because if ... contains a data.frame-like object, no other objects  # may be passed through ... . Instead, add the time column before. }  st_sftime(st_sf(a = 3, g, time = tc)) #> Spatiotemporal feature collection with 1 feature and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 1 ymax: 2 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Representing 2023-06-28 08:39:10.23072. #>   a           g                time #> 1 3 POINT (1 2) 2023-06-28 08:39:10  ## Subsetting g <- st_sfc(st_point(c(1, 2)), st_point(c(1, 3)), st_point(c(2, 3)),       st_point(c(2, 1)), st_point(c(3, 1))) tc <- Sys.time() + 1:5 x <- st_sftime(a = 1:5, g, time = tc)  # rows x[1, ] #> Spatiotemporal feature collection with 1 feature and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 1 ymax: 2 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Representing 2023-06-28 08:39:11.243654. #>   a           g                time #> 1 1 POINT (1 2) 2023-06-28 08:39:11 class(x[1, ]) #> [1] \"sftime\"     \"sf\"         \"data.frame\"  x[x$a < 3, ] #> Spatiotemporal feature collection with 2 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 1 ymax: 3 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:11.243654 to 2023-06-28 08:39:12.243654. #>   a           g                time #> 1 1 POINT (1 2) 2023-06-28 08:39:11 #> 2 2 POINT (1 3) 2023-06-28 08:39:12 class(x[x$a < 3, ]) #> [1] \"sftime\"     \"sf\"         \"data.frame\"  # columns x[, 1] #> Simple feature collection with 5 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 1 xmax: 3 ymax: 3 #> CRS:           NA #>   a           g #> 1 1 POINT (1 2) #> 2 2 POINT (1 3) #> 3 3 POINT (2 3) #> 4 4 POINT (2 1) #> 5 5 POINT (3 1) class(x[, 1]) # drops time column as for ordinary data.frame subsetting,  #> [1] \"sf\"         \"data.frame\" # keeps geometry column of sf object  x[, 3] #> Spatiotemporal feature collection with 5 features and 0 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 1 xmax: 3 ymax: 3 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:11.243654 to 2023-06-28 08:39:15.243654. #>                  time           g #> 1 2023-06-28 08:39:11 POINT (1 2) #> 2 2023-06-28 08:39:12 POINT (1 3) #> 3 2023-06-28 08:39:13 POINT (2 3) #> 4 2023-06-28 08:39:14 POINT (2 1) #> 5 2023-06-28 08:39:15 POINT (3 1) class(x[, 3]) # keeps time column because it is explicitly selected, #> [1] \"sftime\"     \"sf\"         \"data.frame\" # keeps geometry column of sf object, returns an sftime object  x[, 3, drop = TRUE]  #> [1] \"2023-06-28 08:39:11 UTC\" \"2023-06-28 08:39:12 UTC\" #> [3] \"2023-06-28 08:39:13 UTC\" \"2023-06-28 08:39:14 UTC\" #> [5] \"2023-06-28 08:39:15 UTC\" class(x[, 3, drop = TRUE]) # if the geometry column is dropped, not only the #> [1] \"POSIXct\" \"POSIXt\"  # sf class is dropped, but also the sftime class  x[\"a\"] #> Simple feature collection with 5 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 1 xmax: 3 ymax: 3 #> CRS:           NA #>   a           g #> 1 1 POINT (1 2) #> 2 2 POINT (1 3) #> 3 3 POINT (2 3) #> 4 4 POINT (2 1) #> 5 5 POINT (3 1) class(x[\"a\"]) # Time columns are not sticky: If a column is selected by a  #> [1] \"sf\"         \"data.frame\" # character vector and this does not contain the active time column, the time  # column is dropped.   x[c(\"a\", \"time\")] #> Spatiotemporal feature collection with 5 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 1 xmax: 3 ymax: 3 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:11.243654 to 2023-06-28 08:39:15.243654. #>   a                time           g #> 1 1 2023-06-28 08:39:11 POINT (1 2) #> 2 2 2023-06-28 08:39:12 POINT (1 3) #> 3 3 2023-06-28 08:39:13 POINT (2 3) #> 4 4 2023-06-28 08:39:14 POINT (2 1) #> 5 5 2023-06-28 08:39:15 POINT (3 1) class(x[c(\"a\", \"time\")]) # keeps the time column #> [1] \"sftime\"     \"sf\"         \"data.frame\"  # with sf or sftime object  pol = st_sfc(st_polygon(list(cbind(c(0,2,2,0,0),c(0,0,2,2,0))))) h = st_sf(r = 5, pol)  x[h, ]  #> Simple feature collection with 2 features and 2 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 1 xmax: 2 ymax: 2 #> CRS:           NA #>   a           g                time #> 1 1 POINT (1 2) 2023-06-28 08:39:11 #> 4 4 POINT (2 1) 2023-06-28 08:39:14 class(x[h, ]) # returns sftime object #> [1] \"sf\"         \"data.frame\"  h[x, ]  #> Simple feature collection with 1 feature and 1 field #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 0 ymin: 0 xmax: 2 ymax: 2 #> CRS:           NA #>   r                            pol #> 1 5 POLYGON ((0 0, 2 0, 2 2, 0 ... class(h[x, ]) # returns sf object #> [1] \"sf\"         \"data.frame\"  ## Assigning values to columns  # assigning new values to a non-time column x[[\"a\"]] <- 5:1 class(x) #> [1] \"sftime\"     \"sf\"         \"data.frame\"  # assigning allowed new values to the time column x[[\"time\"]] <- Sys.time() + 1:5 class(x) #> [1] \"sftime\"     \"sf\"         \"data.frame\"  # assigning new values to the time column which invalidate the time column x[[\"time\"]] <- list(letters[1:2]) class(x) #> [1] \"sftime\"     \"sf\"         \"data.frame\"  # assigning new values with `$` x$time <- Sys.time() + 1:5 class(x) #> [1] \"sftime\"     \"sf\"         \"data.frame\""},{"path":"https://r-spatial.github.io/sftime/reference/st_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Get, set, or replace time information — st_time","title":"Get, set, or replace time information — st_time","text":"Get, set, replace time information","code":""},{"path":"https://r-spatial.github.io/sftime/reference/st_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get, set, or replace time information — st_time","text":"","code":"st_time(obj, ...)  st_time(x, ...) <- value  # S3 method for sftime st_time(obj, ...)  # S3 method for sf st_time(x, ..., time_column_name = \"time\") <- value  # S3 method for sftime st_time(x, ...) <- value  st_set_time(x, value, ...)  st_drop_time(x)"},{"path":"https://r-spatial.github.io/sftime/reference/st_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get, set, or replace time information — st_time","text":"obj object class sftime. ... Additional arguments; Ignored. x object class sftime sf. value object is_sortable returns  TRUE object class character, NULL. time_column_name Character value; name column set  active time column x.","code":""},{"path":"https://r-spatial.github.io/sftime/reference/st_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get, set, or replace time information — st_time","text":"st_time returns content active time column sftime object.  Assigning object is_sortable returns TRUE sf object creates sftime object.  Assigning object is_sortable returns TRUE sftime object replaces active time column object.","code":""},{"path":"https://r-spatial.github.io/sftime/reference/st_time.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get, set, or replace time information — st_time","text":"case value character x class  sftime, active time column (indicated attribute  time_column) set x[[value]]. replacement function applied sftime objects overwrite  active time column, value NULL, remove  coerce x sftime object. st_drop_time drops time column argument,  reclasses accordingly.","code":""},{"path":"https://r-spatial.github.io/sftime/reference/st_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get, set, or replace time information — st_time","text":"","code":"# from sftime object g <- st_sfc(st_point(1:2)) time <- Sys.time() x <- st_sftime(a = 3, g, time = time) st_time(x)  #> [1] \"2023-06-28 08:39:11 UTC\"  ## assign a vector with time information  # to sf object x <- st_sf(a = 3, g) st_time(x) <- time x #> Spatiotemporal feature collection with 1 feature and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 1 ymax: 2 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Representing 2023-06-28 08:39:11.20161. #>   a           g                time #> 1 3 POINT (1 2) 2023-06-28 08:39:11  # to sftime object x <- st_sftime(a = 3, g, time = time) st_time(x) <- Sys.time()  ## change the time column to another already existing column st_time(x) <- \"a\"  ## remove time column from sftime object st_time(x) <- NULL  ## pipe-friendly  # assign time column to sf object x <- st_sf(a = 3, g) x <- st_set_time(x, time)  # remove time column from sftime object st_set_time(x, NULL) #> Simple feature collection with 1 feature and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 1 ymax: 2 #> CRS:           NA #>   a           g #> 1 3 POINT (1 2)  ## drop time column and class  # same as x <- st_set_time(x, NULL) st_drop_time(x) #> Simple feature collection with 1 feature and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 1 ymax: 2 #> CRS:           NA #>   a           g #> 1 3 POINT (1 2)"},{"path":"https://r-spatial.github.io/sftime/reference/tidyverse.html","id":null,"dir":"Reference","previous_headings":"","what":"'tidyverse' methods for sftime objects — tidyverse","title":"'tidyverse' methods for sftime objects — tidyverse","text":"'tidyverse' methods sftime objects. Geometries sticky, use  .data.frame let dplyr's methods drop . Use  methods without .sftime suffix loading  'tidyverse' package generic (loading package 'tidyverse').","code":""},{"path":"https://r-spatial.github.io/sftime/reference/tidyverse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"'tidyverse' methods for sftime objects — tidyverse","text":"","code":"inner_join.sftime(x, y, by = NULL, copy = FALSE, suffix = c(\".x\", \".y\"), ...)  left_join.sftime(x, y, by = NULL, copy = FALSE, suffix = c(\".x\", \".y\"), ...)  right_join.sftime(x, y, by = NULL, copy = FALSE, suffix = c(\".x\", \".y\"), ...)  full_join.sftime(x, y, by = NULL, copy = FALSE, suffix = c(\".x\", \".y\"), ...)  semi_join.sftime(x, y, by = NULL, copy = FALSE, suffix = c(\".x\", \".y\"), ...)  anti_join.sftime(x, y, by = NULL, copy = FALSE, suffix = c(\".x\", \".y\"), ...)  filter.sftime(.data, ..., .dots)  arrange.sftime(.data, ..., .dots)  group_by.sftime(.data, ..., add = FALSE)  ungroup.sftime(.data, ...)  rowwise.sftime(.data, ...)  mutate.sftime(.data, ..., .dots)  transmute.sftime(.data, ..., .dots)  select.sftime(.data, ...)  rename.sftime(.data, ...)  slice.sftime(.data, ..., .dots)  summarise.sftime(.data, ..., .dots, do_union = TRUE, is_coverage = FALSE)  summarize.sftime(.data, ..., .dots, do_union = TRUE, is_coverage = FALSE)  distinct.sftime(.data, ..., .keep_all = FALSE)  gather.sftime(   data,   key,   value,   ...,   na.rm = FALSE,   convert = FALSE,   factor_key = FALSE )  pivot_longer.sftime(   data,   cols,   names_to = \"name\",   names_prefix = NULL,   names_sep = NULL,   names_pattern = NULL,   names_ptypes = NULL,   names_transform = NULL,   names_repair = \"check_unique\",   values_to = \"value\",   values_drop_na = FALSE,   values_ptypes = NULL,   values_transform = NULL,   ... )  spread.sftime(   data,   key,   value,   fill = NA,   convert = FALSE,   drop = TRUE,   sep = NULL )  sample_n.sftime(   tbl,   size,   replace = FALSE,   weight = NULL,   .env = parent.frame() )  sample_frac.sftime(   tbl,   size = 1,   replace = FALSE,   weight = NULL,   .env = parent.frame() )  nest.sftime(.data, ...)  unnest.sftime(data, ..., .preserve = NULL)  separate.sftime(   data,   col,   into,   sep = \"[^[:alnum:]]+\",   remove = TRUE,   convert = FALSE,   extra = \"warn\",   fill = \"warn\",   ... )  unite.sftime(data, col, ..., sep = \"_\", remove = TRUE)  separate_rows.sftime(data, ..., sep = \"[^[:alnum:]]+\", convert = FALSE)  drop_na.sftime(data, ...)"},{"path":"https://r-spatial.github.io/sftime/reference/tidyverse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"'tidyverse' methods for sftime objects — tidyverse","text":"x object class sftime. y See dplyr::`mutate-joins`. character vector variables join . NULL, default, *_join() perform natural join, using variables common across x y. message lists variables can check correct; suppress message supplying explicitly. join different variables x y, use named vector. example, = c(\"\" = \"b\") match x$y$b. join multiple variables, use vector length > 1. example, = c(\"\", \"b\") match x$y$x$b y$b. Use named vector match different variables x y. example, = c(\"\" = \"b\", \"c\" = \"d\") match x$y$b x$c y$d. perform cross-join, generating combinations x y, use = character(). copy x y data source, copy TRUE, y copied src x.  allows join tables across srcs, potentially expensive operation must opt . suffix non-joined duplicate variables x y, suffixes added output disambiguate . character vector length 2. ... arguments .data object class stime. .dots see corresponding function package dplyr add see corresponding function dplyr do_union logical; case summary create geometry column, geometries created unioning using st_union, simply combining using st_combine? Using st_union resolves internal boundaries, case unioning points, likely change order points; see Details. is_coverage logical; do_union TRUE, use optimized algorithm features form polygonal coverage (overlaps) .keep_all see corresponding function dplyr data see original function docs key see original function docs value see original function docs na.rm see original function docs convert see separate_rows factor_key see original function docs cols see original function docs names_to see original function docs names_prefix see original function docs names_sep see original function docs names_pattern see original function docs names_ptypes see original function docs names_transform see original function docs names_repair see original function docs values_to see original function docs values_drop_na see original function docs values_ptypes see original function docs values_transform see original function docs fill see original function docs drop see original function docs sep see separate_rows tbl see original function docs size see original function docs replace see original function docs weight see original function docs .env see original function docs .preserve see unnest col see separate see separate remove see separate extra see separate","code":""},{"path":"https://r-spatial.github.io/sftime/reference/tidyverse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"'tidyverse' methods for sftime objects — tidyverse","text":"_join methods: object class sftime    representing joining result x y. See    mutate-joins. filter: See filter. arrange: See arrange. group_by ungroup: grouped sftime    object. See arrange. rowwise: sftime object. See    rowwise. mutate transmute: See    mutate. select: See select. active    time column explicitly selected, sf object returned. rename: See rename. slice: See slice. summarize summarise: See    summarise. distinct: See distinct. gather: See gather.","code":""},{"path":"https://r-spatial.github.io/sftime/reference/tidyverse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"'tidyverse' methods for sftime objects — tidyverse","text":"","code":"g1 <- st_sfc(st_point(1:2), st_point(c(5, 8)), st_point(c(2, 9))) x1 <- st_sftime(a = 1:3, geometry = g1, time = Sys.time())  g2 <- st_sfc(st_point(c(4, 6)), st_point(c(4, 6)), st_point(c(4, 6))) x2 <- st_sftime(a = 2:4, geometry = g2, time = Sys.time())  library(dplyr)  ## inner_join inner_join(x1, as.data.frame(x2), by = \"a\") # note: the active time column is #> Spatiotemporal feature collection with 2 features and 2 fields #> Active geometry column: geometry.x #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 2 ymin: 8 xmax: 5 ymax: 9 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:11.832179 to 2023-06-28 08:39:11.832179. #>   a              time.y  geometry.x  geometry.y              time.x #> 1 2 2023-06-28 08:39:11 POINT (5 8) POINT (4 6) 2023-06-28 08:39:11 #> 2 3 2023-06-28 08:39:11 POINT (2 9) POINT (4 6) 2023-06-28 08:39:11 # time.x and the active geometry column geometry.x  inner_join(x2, as.data.frame(x1), by = \"a\") #> Spatiotemporal feature collection with 2 features and 2 fields #> Active geometry column: geometry.x #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 4 ymin: 6 xmax: 4 ymax: 6 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:11.836181 to 2023-06-28 08:39:11.836181. #>   a              time.y  geometry.x  geometry.y              time.x #> 1 2 2023-06-28 08:39:11 POINT (4 6) POINT (5 8) 2023-06-28 08:39:11 #> 2 3 2023-06-28 08:39:11 POINT (4 6) POINT (2 9) 2023-06-28 08:39:11  ## left_join left_join(x1, as.data.frame(x2), by = \"a\") #> Spatiotemporal feature collection with 3 features and 2 fields #> Active geometry column: geometry.x #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 5 ymax: 9 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:11.832179 to 2023-06-28 08:39:11.832179. #>   a              time.y  geometry.x  geometry.y              time.x #> 1 1                <NA> POINT (1 2) POINT EMPTY 2023-06-28 08:39:11 #> 2 2 2023-06-28 08:39:11 POINT (5 8) POINT (4 6) 2023-06-28 08:39:11 #> 3 3 2023-06-28 08:39:11 POINT (2 9) POINT (4 6) 2023-06-28 08:39:11  left_join(x2, as.data.frame(x1), by = \"a\") #> Spatiotemporal feature collection with 3 features and 2 fields #> Active geometry column: geometry.x #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 4 ymin: 6 xmax: 4 ymax: 6 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:11.836181 to 2023-06-28 08:39:11.836181. #>   a              time.y  geometry.x  geometry.y              time.x #> 1 2 2023-06-28 08:39:11 POINT (4 6) POINT (5 8) 2023-06-28 08:39:11 #> 2 3 2023-06-28 08:39:11 POINT (4 6) POINT (2 9) 2023-06-28 08:39:11 #> 3 4                <NA> POINT (4 6) POINT EMPTY 2023-06-28 08:39:11  ## right_join right_join(x1, as.data.frame(x2), by = \"a\") #> Spatiotemporal feature collection with 3 features and 2 fields #> Active geometry column: geometry.x (with 1 geometry empty) #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 2 ymin: 8 xmax: 5 ymax: 9 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:11.832179 to 2023-06-28 08:39:11.832179. #>   a              time.y  geometry.x  geometry.y              time.x #> 1 2 2023-06-28 08:39:11 POINT (5 8) POINT (4 6) 2023-06-28 08:39:11 #> 2 3 2023-06-28 08:39:11 POINT (2 9) POINT (4 6) 2023-06-28 08:39:11 #> 3 4 2023-06-28 08:39:11 POINT EMPTY POINT (4 6)                <NA>  right_join(x2, as.data.frame(x1), by = \"a\") #> Spatiotemporal feature collection with 3 features and 2 fields #> Active geometry column: geometry.x (with 1 geometry empty) #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 4 ymin: 6 xmax: 4 ymax: 6 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:11.836181 to 2023-06-28 08:39:11.836181. #>   a              time.y  geometry.x  geometry.y              time.x #> 1 2 2023-06-28 08:39:11 POINT (4 6) POINT (5 8) 2023-06-28 08:39:11 #> 2 3 2023-06-28 08:39:11 POINT (4 6) POINT (2 9) 2023-06-28 08:39:11 #> 3 1 2023-06-28 08:39:11 POINT EMPTY POINT (1 2)                <NA>  ## full_join full_join(x1, as.data.frame(x2), by = \"a\") #> Spatiotemporal feature collection with 4 features and 2 fields #> Active geometry column: geometry.x (with 1 geometry empty) #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 5 ymax: 9 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:11.832179 to 2023-06-28 08:39:11.832179. #>   a              time.y  geometry.x  geometry.y              time.x #> 1 1                <NA> POINT (1 2) POINT EMPTY 2023-06-28 08:39:11 #> 2 2 2023-06-28 08:39:11 POINT (5 8) POINT (4 6) 2023-06-28 08:39:11 #> 3 3 2023-06-28 08:39:11 POINT (2 9) POINT (4 6) 2023-06-28 08:39:11 #> 4 4 2023-06-28 08:39:11 POINT EMPTY POINT (4 6)                <NA>  full_join(x2, as.data.frame(x1), by = \"a\") #> Spatiotemporal feature collection with 4 features and 2 fields #> Active geometry column: geometry.x (with 1 geometry empty) #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 4 ymin: 6 xmax: 4 ymax: 6 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:11.836181 to 2023-06-28 08:39:11.836181. #>   a              time.y  geometry.x  geometry.y              time.x #> 1 2 2023-06-28 08:39:11 POINT (4 6) POINT (5 8) 2023-06-28 08:39:11 #> 2 3 2023-06-28 08:39:11 POINT (4 6) POINT (2 9) 2023-06-28 08:39:11 #> 3 4                <NA> POINT (4 6) POINT EMPTY 2023-06-28 08:39:11 #> 4 1 2023-06-28 08:39:11 POINT EMPTY POINT (1 2)                <NA>  ## semi_join semi_join(x1, as.data.frame(x2), by = \"a\") #> Spatiotemporal feature collection with 2 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 2 ymin: 8 xmax: 5 ymax: 9 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:11.832179 to 2023-06-28 08:39:11.832179. #>   a    geometry                time #> 1 2 POINT (5 8) 2023-06-28 08:39:11 #> 2 3 POINT (2 9) 2023-06-28 08:39:11  semi_join(x2, as.data.frame(x1), by = \"a\") #> Spatiotemporal feature collection with 2 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 4 ymin: 6 xmax: 4 ymax: 6 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:11.836181 to 2023-06-28 08:39:11.836181. #>   a    geometry                time #> 1 2 POINT (4 6) 2023-06-28 08:39:11 #> 2 3 POINT (4 6) 2023-06-28 08:39:11  ## anti_join anti_join(x1, as.data.frame(x2), by = \"a\") #> Spatiotemporal feature collection with 1 feature and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 1 ymax: 2 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Representing 2023-06-28 08:39:11.832179. #>   a    geometry                time #> 1 1 POINT (1 2) 2023-06-28 08:39:11  anti_join(x2, as.data.frame(x1), by = \"a\") #> Spatiotemporal feature collection with 1 feature and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 4 ymin: 6 xmax: 4 ymax: 6 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Representing 2023-06-28 08:39:11.836181. #>   a    geometry                time #> 1 4 POINT (4 6) 2023-06-28 08:39:11  ## filter filter(x1, a <= 2) #> Spatiotemporal feature collection with 2 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 5 ymax: 8 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:11.832179 to 2023-06-28 08:39:11.832179. #>   a    geometry                time #> 1 1 POINT (1 2) 2023-06-28 08:39:11 #> 2 2 POINT (5 8) 2023-06-28 08:39:11  ## arrange arrange(x1, dplyr::desc(a)) #> Spatiotemporal feature collection with 3 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 5 ymax: 9 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:11.832179 to 2023-06-28 08:39:11.832179. #>   a                time    geometry #> 1 3 2023-06-28 08:39:11 POINT (2 9) #> 2 2 2023-06-28 08:39:11 POINT (5 8) #> 3 1 2023-06-28 08:39:11 POINT (1 2)  ## group_by group_by(x1, time) #> Spatiotemporal feature collection with 3 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 5 ymax: 9 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:11.832179 to 2023-06-28 08:39:11.832179. #> # A tibble: 3 × 3 #> # Groups:   time [1] #>       a geometry time                #> * <int>  <POINT> <dttm>              #> 1     1    (1 2) 2023-06-28 08:39:11 #> 2     2    (5 8) 2023-06-28 08:39:11 #> 3     3    (2 9) 2023-06-28 08:39:11  ## ungroup ungroup(group_by(x1, time)) #> Spatiotemporal feature collection with 3 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 5 ymax: 9 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:11.832179 to 2023-06-28 08:39:11.832179. #> # A tibble: 3 × 3 #>       a geometry time                #> * <int>  <POINT> <dttm>              #> 1     1    (1 2) 2023-06-28 08:39:11 #> 2     2    (5 8) 2023-06-28 08:39:11 #> 3     3    (2 9) 2023-06-28 08:39:11  ## rowwise x1 %>%   mutate(a1 = 5:7) %>%   rowwise() %>%   mutate(a2 = mean(a, a1)) #> Spatiotemporal feature collection with 3 features and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 5 ymax: 9 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:11.832179 to 2023-06-28 08:39:11.832179. #> # A tibble: 3 × 5 #> # Rowwise:  #>       a geometry time                   a1    a2 #> * <int>  <POINT> <dttm>              <int> <int> #> 1     1    (1 2) 2023-06-28 08:39:11     5     1 #> 2     2    (5 8) 2023-06-28 08:39:11     6     2 #> 3     3    (2 9) 2023-06-28 08:39:11     7     3  ## mutate x1 %>%   mutate(a1 = 5:7) #> Spatiotemporal feature collection with 3 features and 2 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 5 ymax: 9 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:11.832179 to 2023-06-28 08:39:11.832179. #>   a    geometry                time a1 #> 1 1 POINT (1 2) 2023-06-28 08:39:11  5 #> 2 2 POINT (5 8) 2023-06-28 08:39:11  6 #> 3 3 POINT (2 9) 2023-06-28 08:39:11  7  ## transmute x1 %>%   transmute(a1 = 5:7) #> Simple feature collection with 3 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 5 ymax: 9 #> CRS:           NA #>   a1    geometry #> 1  5 POINT (1 2) #> 2  6 POINT (5 8) #> 3  7 POINT (2 9)  ## select x1 %>%   select(-time) %>%   select(geometry) #> Simple feature collection with 3 features and 0 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 5 ymax: 9 #> CRS:           NA #>      geometry #> 1 POINT (1 2) #> 2 POINT (5 8) #> 3 POINT (2 9)  ## rename x1 %>%   rename(a1 = a) #> Spatiotemporal feature collection with 3 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 5 ymax: 9 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:11.832179 to 2023-06-28 08:39:11.832179. #>   a1                time    geometry #> 1  1 2023-06-28 08:39:11 POINT (1 2) #> 2  2 2023-06-28 08:39:11 POINT (5 8) #> 3  3 2023-06-28 08:39:11 POINT (2 9)  ## slice x1 %>%   slice(1:2) #> Spatiotemporal feature collection with 2 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 5 ymax: 8 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:11.832179 to 2023-06-28 08:39:11.832179. #>   a                time    geometry #> 1 1 2023-06-28 08:39:11 POINT (1 2) #> 2 2 2023-06-28 08:39:11 POINT (5 8)  ## summarise x1 %>%   summarise(time = mean(time)) #> Spatiotemporal feature collection with 1 feature and 0 fields #> Geometry type: MULTIPOINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 5 ymax: 9 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Representing 2023-06-28 08:39:11.832179. #>                  time                       geometry #> 1 2023-06-28 08:39:11 MULTIPOINT ((1 2), (2 9), (...    x1 %>%   summarize(time = mean(time)) #> Spatiotemporal feature collection with 1 feature and 0 fields #> Geometry type: MULTIPOINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 5 ymax: 9 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Representing 2023-06-28 08:39:11.832179. #>                  time                       geometry #> 1 2023-06-28 08:39:11 MULTIPOINT ((1 2), (2 9), (...  ## distinct x1 %>%   distinct(geometry) #> Simple feature collection with 3 features and 0 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 5 ymax: 9 #> CRS:           NA #>      geometry #> 1 POINT (1 2) #> 2 POINT (5 8) #> 3 POINT (2 9)  ## gather library(tidyr) x1 %>%   mutate(a1 = 5:7) %>%   gather(key = \"variable\", value = \"value\", a, a1) #> Spatiotemporal feature collection with 6 features and 2 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 5 ymax: 9 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:11.832179 to 2023-06-28 08:39:11.832179. #>                  time key value    geometry #> 1 2023-06-28 08:39:11   a     1 POINT (1 2) #> 2 2023-06-28 08:39:11   a     2 POINT (5 8) #> 3 2023-06-28 08:39:11   a     3 POINT (2 9) #> 4 2023-06-28 08:39:11  a1     5 POINT (1 2) #> 5 2023-06-28 08:39:11  a1     6 POINT (5 8) #> 6 2023-06-28 08:39:11  a1     7 POINT (2 9)  ## pivot_longer x1 %>%   mutate(a1 = 5:7) %>%   pivot_longer(cols = c(\"a\", \"a1\"), names_to = \"variable\", values_to = \"value\") #> Spatiotemporal feature collection with 6 features and 2 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 5 ymax: 9 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:11.832179 to 2023-06-28 08:39:11.832179. #> # A tibble: 6 × 4 #>   geometry time                variable value #> *  <POINT> <dttm>              <chr>    <int> #> 1    (1 2) 2023-06-28 08:39:11 a            1 #> 2    (1 2) 2023-06-28 08:39:11 a1           5 #> 3    (5 8) 2023-06-28 08:39:11 a            2 #> 4    (5 8) 2023-06-28 08:39:11 a1           6 #> 5    (2 9) 2023-06-28 08:39:11 a            3 #> 6    (2 9) 2023-06-28 08:39:11 a1           7  ## spread x1 %>%   mutate(a1 = 5:7) %>%   gather(key = \"variable\", value = \"value\", a, a1) %>%   spread(key = \"variable\", value = \"value\") #> Spatiotemporal feature collection with 3 features and 2 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 5 ymax: 9 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:11.832179 to 2023-06-28 08:39:11.832179. #>                  time a a1    geometry #> 1 2023-06-28 08:39:11 1  5 POINT (1 2) #> 2 2023-06-28 08:39:11 2  6 POINT (5 8) #> 3 2023-06-28 08:39:11 3  7 POINT (2 9)  ## sample_n set.seed(234) x1 %>%   sample_n(size = 10, replace = TRUE) #> Spatiotemporal feature collection with 10 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 5 ymax: 9 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:11.832179 to 2023-06-28 08:39:11.832179. #>    a                time    geometry #> 1  1 2023-06-28 08:39:11 POINT (1 2) #> 2  3 2023-06-28 08:39:11 POINT (2 9) #> 3  2 2023-06-28 08:39:11 POINT (5 8) #> 4  2 2023-06-28 08:39:11 POINT (5 8) #> 5  2 2023-06-28 08:39:11 POINT (5 8) #> 6  2 2023-06-28 08:39:11 POINT (5 8) #> 7  1 2023-06-28 08:39:11 POINT (1 2) #> 8  1 2023-06-28 08:39:11 POINT (1 2) #> 9  3 2023-06-28 08:39:11 POINT (2 9) #> 10 2 2023-06-28 08:39:11 POINT (5 8)  ## sample_frac x1 %>%   sample_frac(size = 10, replace = TRUE) %>%   sample_frac(size = 0.1, replace = FALSE) #> Spatiotemporal feature collection with 3 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 2 ymax: 9 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:11.832179 to 2023-06-28 08:39:11.832179. #>   a                time    geometry #> 1 1 2023-06-28 08:39:11 POINT (1 2) #> 2 1 2023-06-28 08:39:11 POINT (1 2) #> 3 3 2023-06-28 08:39:11 POINT (2 9)  ## nest x1 %>%   nest(a1 = -time) #>                  time                        a1 #> 1 2023-06-28 08:39:11 1, 2, 3, 1, 2, 5, 8, 2, 9  ## unnest x1 %>%   mutate(a1 = list(1, c(1, 2), 5)) %>%   unnest(a1) #> Spatiotemporal feature collection with 4 features and 2 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 5 ymax: 9 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:11.832179 to 2023-06-28 08:39:11.832179. #> # A tibble: 4 × 4 #>       a geometry time                   a1 #> * <int>  <POINT> <dttm>              <dbl> #> 1     1    (1 2) 2023-06-28 08:39:11     1 #> 2     2    (5 8) 2023-06-28 08:39:11     1 #> 3     2    (5 8) 2023-06-28 08:39:11     2 #> 4     3    (2 9) 2023-06-28 08:39:11     5  ## separate x1 %>%   mutate(x = c(NA, \"a.b\", \"a.d\")) %>%   separate(x, c(\"A\", \"B\")) #> Spatiotemporal feature collection with 3 features and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 5 ymax: 9 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:11.832179 to 2023-06-28 08:39:11.832179. #>   a                time    A    B    geometry #> 1 1 2023-06-28 08:39:11 <NA> <NA> POINT (1 2) #> 2 2 2023-06-28 08:39:11    a    b POINT (5 8) #> 3 3 2023-06-28 08:39:11    a    d POINT (2 9)  ## unite x1 %>%   mutate(x = c(NA, \"a.b\", \"a.d\")) %>%   separate(x, c(\"A\", \"B\")) %>%   unite(x, c(\"A\", \"B\")) #> Spatiotemporal feature collection with 3 features and 2 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 5 ymax: 9 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:11.832179 to 2023-06-28 08:39:11.832179. #>   a                time   col    geometry #> 1 1 2023-06-28 08:39:11 NA_NA POINT (1 2) #> 2 2 2023-06-28 08:39:11   a_b POINT (5 8) #> 3 3 2023-06-28 08:39:11   a_d POINT (2 9)    ## separate_rows x1 %>%   mutate(z = c(\"1\", \"2,3,4\", \"5,6\")) %>%   separate_rows(z, convert = TRUE) #> Spatiotemporal feature collection with 6 features and 2 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 5 ymax: 9 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:11.832179 to 2023-06-28 08:39:11.832179. #> # A tibble: 6 × 4 #>       a geometry time                    z #> * <int>  <POINT> <dttm>              <int> #> 1     1    (1 2) 2023-06-28 08:39:11     1 #> 2     2    (5 8) 2023-06-28 08:39:11     2 #> 3     2    (5 8) 2023-06-28 08:39:11     3 #> 4     2    (5 8) 2023-06-28 08:39:11     4 #> 5     3    (2 9) 2023-06-28 08:39:11     5 #> 6     3    (2 9) 2023-06-28 08:39:11     6  ## drop_na x1 %>%   mutate(z = c(1, 2, NA)) %>%   drop_na(z) #> Spatiotemporal feature collection with 2 features and 2 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 5 ymax: 8 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:11.832179 to 2023-06-28 08:39:11.832179. #>   a                time z    geometry #> 1 1 2023-06-28 08:39:11 1 POINT (1 2) #> 2 2 2023-06-28 08:39:11 2 POINT (5 8)    x1 %>%   mutate(z = c(1, NA, NA)) %>%   drop_na(z)    #> Spatiotemporal feature collection with 1 feature and 2 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 1 ymax: 2 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Representing 2023-06-28 08:39:11.832179. #>   a                time z    geometry #> 1 1 2023-06-28 08:39:11 1 POINT (1 2)  x1 %>%   mutate(time = replace(time, 1, NA)) %>%   drop_na(time) #> Spatiotemporal feature collection with 2 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 2 ymin: 8 xmax: 5 ymax: 9 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:11.832179 to 2023-06-28 08:39:11.832179. #>   a                time    geometry #> 1 2 2023-06-28 08:39:11 POINT (5 8) #> 2 3 2023-06-28 08:39:11 POINT (2 9)"},{"path":"https://r-spatial.github.io/sftime/reference/transform.sftime.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform method for sftime objects — transform.sftime","title":"Transform method for sftime objects — transform.sftime","text":"Can used create modify attribute variables; transforming  geometries see st_transform, functions starting  st_.","code":""},{"path":"https://r-spatial.github.io/sftime/reference/transform.sftime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform method for sftime objects — transform.sftime","text":"","code":"# S3 method for sftime transform(`_data`, ...)"},{"path":"https://r-spatial.github.io/sftime/reference/transform.sftime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform method for sftime objects — transform.sftime","text":"_data object class sftime. ... arguments form new_variable=expression","code":""},{"path":"https://r-spatial.github.io/sftime/reference/transform.sftime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform method for sftime objects — transform.sftime","text":"_data (sftime object) modified attribute values  (columns).","code":""},{"path":"https://r-spatial.github.io/sftime/reference/transform.sftime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform method for sftime objects — transform.sftime","text":"","code":"# create an sftime object g <- st_sfc(st_point(c(1, 2)), st_point(c(1, 3)), st_point(c(2, 3)),       st_point(c(2, 1)), st_point(c(3, 1))) x <-     data.frame(a = 1:5, g, time = Sys.time() + 1:5, stringsAsFactors = FALSE) x_sftime <- st_as_sftime(x) x_sftime #> Spatiotemporal feature collection with 5 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 1 xmax: 3 ymax: 3 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:15.139699 to 2023-06-28 08:39:19.139699. #>   a                time    geometry #> 1 1 2023-06-28 08:39:15 POINT (1 2) #> 2 2 2023-06-28 08:39:16 POINT (1 3) #> 3 3 2023-06-28 08:39:17 POINT (2 3) #> 4 4 2023-06-28 08:39:18 POINT (2 1) #> 5 5 2023-06-28 08:39:19 POINT (3 1)  # modify values in column a transform(x_sftime, a = rev(a)) #> Spatiotemporal feature collection with 5 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 1 xmax: 3 ymax: 3 #> CRS:           NA #> Time column with classes: 'POSIXct', 'POSIXt'. #> Ranging from 2023-06-28 08:39:15.139699 to 2023-06-28 08:39:19.139699. #>   a                time    geometry #> 1 5 2023-06-28 08:39:15 POINT (1 2) #> 2 4 2023-06-28 08:39:16 POINT (1 3) #> 3 3 2023-06-28 08:39:17 POINT (2 3) #> 4 2 2023-06-28 08:39:18 POINT (2 1) #> 5 1 2023-06-28 08:39:19 POINT (3 1)"},{"path":"https://r-spatial.github.io/sftime/news/index.html","id":"sftime-development-version","dir":"Changelog","previous_headings":"","what":"sftime (development version)","title":"sftime (development version)","text":"Add dedicated tidyr::drop_na() method sftime objects. (See recent addition sf objects #1975). Add dedicated dplyr::dplyr_reconstruct() method sftime objects. Relying method sf objects caused erroneously column binding second object data frame without conflicting column names sf time columns. case, sf objects returned, even though sftime object returned. See also https://github.com/r-spatial/sf/issues/1958#issuecomment-1181982244. Add methods convert sftime objects : Objects spatstat package classes (ppp, psp, lpp) sftrack sftraj objects sftrack package. cubble_df objects cubble package. Bug fix st_time<-.sftime: Still contained references old tcclass. allow give active time column character vector value.","code":""},{"path":"https://r-spatial.github.io/sftime/news/index.html","id":"version-02-0","dir":"Changelog","previous_headings":"","what":"version 0.2-0","title":"version 0.2-0","text":"CRAN release: 2022-03-17 initial CRAN submission","code":""}]
